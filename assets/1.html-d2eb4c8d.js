import{_ as n,p as s,q as a,R as t,a1 as e}from"./framework-49860b1b.js";const p={},c=e(`<h1 id="基础组件" tabindex="-1"><a class="header-anchor" href="#基础组件" aria-hidden="true">#</a> 基础组件</h1><h2 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> Text</h2><p>创建文字，并设置其样式。示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;this is Text Widget&#39;</span></span><span class="token punctuation">,</span>
    style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>
       fontSize<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
       fontFamily<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Futura&#39;</span></span><span class="token punctuation">,</span>
       color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="icon" tabindex="-1"><a class="header-anchor" href="#icon" aria-hidden="true">#</a> Icon</h2><p>创建图形符号，<code>Flutter</code> 将会为 <code>Material</code> 和 <code>Cupertino</code> 的应用提前加载 <code>icon</code>。示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Icon</span><span class="token punctuation">(</span>
    <span class="token class-name">Icons</span><span class="token punctuation">.</span>widgets<span class="token punctuation">,</span>
    size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    color<span class="token punctuation">:</span> <span class="token class-name">Colurs</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> Image</h2><p>加载图片</p><p><code>web</code> 端会出现跨域问题</p><ul><li><code>Image()</code>：通用方法，使用 <code>ImageProvider</code> 实现，下面方法相当于别名，本质上也是使用这个方法</li><li><code>Image.asset()</code>：加载资源图片，需配置资源路径，见下文</li><li><code>Image.file()</code>：加载本地图片文件</li><li><code>Image.network()</code>：加载网络图片</li><li><code>Image.memory()</code>：加载 <code>Uint8List</code> 资源图片</li></ul><h3 id="配置资源路径" tabindex="-1"><a class="header-anchor" href="#配置资源路径" aria-hidden="true">#</a> 配置资源路径</h3><ul><li>在工程根目录下创建一个 <code>images</code> 目录，并将图片 <code>avatar.png</code> 拷贝到该目录。也可以设置其他自定义目录,如 <code>lib</code> 下面的 <code>images</code>，方便管理。</li><li>在 <code>pubspec.yaml</code> 中的 <code>flutter</code> 部分添加如下内容（yaml 文件对缩进严格，必须按照每一层两个空格缩进的方式进行缩进）：<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>assets<span class="token punctuation">:</span>
  # 指定全目录
  <span class="token operator">-</span> assets<span class="token operator">/</span>images<span class="token operator">/</span>
  # 指定文件
  <span class="token operator">-</span> assets<span class="token operator">/</span>images<span class="token operator">/</span>avatar<span class="token punctuation">.</span>png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="各种方法使用示例" tabindex="-1"><a class="header-anchor" href="#各种方法使用示例" aria-hidden="true">#</a> 各种方法使用示例</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Image</span><span class="token punctuation">(</span>
  image<span class="token punctuation">:</span> <span class="token class-name">AssetImage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;assets/images/avatar.png&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  width<span class="token punctuation">:</span> <span class="token number">100.0</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;assets/images/avatar.png&quot;</span></span><span class="token punctuation">,</span>
  width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token class-name">Image</span><span class="token punctuation">(</span>
  image<span class="token punctuation">:</span> <span class="token class-name">NetworkImage</span><span class="token punctuation">(</span>
      <span class="token string-literal"><span class="token string">&quot;https://avatars2.githubusercontent.com/u/20411648&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">network</span><span class="token punctuation">(</span>
  <span class="token string-literal"><span class="token string">&quot;https://avatars2.githubusercontent.com/u/20411648?s=460&amp;v=4&quot;</span></span><span class="token punctuation">,</span>
  width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h3><ul><li><code>Image</code> 的 <code>width</code>、<code>height</code> 参数，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小。 如果只设置 <code>width</code>、<code>height</code> 的其中一个，那么另一个属性默认会按比例缩放,可以通过 <code>fit</code> 属性来指定适应规则,具体介绍参考文档</li><li><code>Image</code> <code>缓存，Image</code> 加载过得图片只在内存中会有缓存，无法缓存本地。一旦应用关闭，这个缓存就没有了，下次重新启动还会从网络下载并缓存</li><li>不能直接将 <code>assets</code> 目录设置为资源目录，要在里面新建文件夹</li></ul><h2 id="card" tabindex="-1"><a class="header-anchor" href="#card" aria-hidden="true">#</a> Card</h2><p><code>Card</code> 的通常用于是包裹其他元素，其只接收一个子元素，但可以为 <code>Row</code> 或 <code>Column</code></p><h2 id="listtile" tabindex="-1"><a class="header-anchor" href="#listtile" aria-hidden="true">#</a> ListTile</h2><p><code>ListTile</code> 是一个内置的列表样式组件，其包含 3 行文本（其实只有两行，第三行是 <code>subtitle</code> 的换行），以及可选的前后图标</p><p>若其效果无法满足，也可通过 <code>Row</code> 来手动实现</p><h3 id="注意点-1" tabindex="-1"><a class="header-anchor" href="#注意点-1" aria-hidden="true">#</a> 注意点</h3><p><code>ListTile</code> 自带点击水波纹效果，如果将其放在 <code>Container</code> 内部，且 <code>Container</code> 设置了背景色时，水波纹效果将会不显示。如果想设置背景色但是又不想遮挡水波纹效果，可将其放在 <code>Ink</code> 组件下，通过 <code>Ink</code> 组件设置背景色</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Container</span><span class="token punctuation">(</span>
    <span class="token comment">// 此组件不设置背景色</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Ink</span><span class="token punctuation">(</span>
        decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wrap" tabindex="-1"><a class="header-anchor" href="#wrap" aria-hidden="true">#</a> Wrap</h2><p><code>Row</code> 是不会自动换行的，要实现自动换行，可使用 <code>Wrap</code></p><h2 id="row-和-column" tabindex="-1"><a class="header-anchor" href="#row-和-column" aria-hidden="true">#</a> Row 和 Column</h2><p><code>Row</code> 和 <code>Column</code> 是基于 <code>web</code> 的 <code>flexbox</code> 布局模型设计的</p><h3 id="mainaxissize" tabindex="-1"><a class="header-anchor" href="#mainaxissize" aria-hidden="true">#</a> mainAxisSize</h3><p><code>mainAxisSize</code> 属性决定了它们两个能在主轴上占据多大的空间，可选值如下</p><ul><li><code>MainAxisSize.max</code>：默认值，占据主轴上所有空间</li><li><code>MainAxisSize.min</code>：仅根据它们的 <code>children</code> 所需要的空间</li></ul><h3 id="mainaxisalignment" tabindex="-1"><a class="header-anchor" href="#mainaxisalignment" aria-hidden="true">#</a> mainAxisAlignment</h3><p>当 <code>mainAxisSize: MainAxisSize.max</code> 时，它们会使用额外空间来对齐其 <code>children</code></p><p><code>mainAxisAlignment</code> 属性决定了它们如何在额外空间中的对齐方式。可选值如下（参考 web 的 justify-content）</p><ul><li><code>MainAxisAlignment.start</code>：默认值，在主轴起点处对齐</li><li><code>MainAxisAlignment.end</code>：在主轴终点处对齐</li><li><code>MainAxisAlignment.center</code>：主轴中心对齐</li><li><code>MainAxisAlignment.spaceBetween</code>：两端对齐，其余平均分配</li><li><code>MainAxisAlignment.spaceEvenly</code>：所有空间平均分配</li><li><code>MainAxisAlignment.spaceAround</code>：第一个 <code>child</code> 之前和最后一个 <code>child</code> 之后的空间为其他空间的一半</li></ul><h3 id="crossaxisalignment" tabindex="-1"><a class="header-anchor" href="#crossaxisalignment" aria-hidden="true">#</a> crossAxisAlignment</h3><p><code>crossAxisAlignment</code> 属性决定了它们如何在其交叉轴上对齐其 children。可选值如下（参考 web 的 align-items）</p><p>注意交叉轴默认跟随子元素的尺寸，若全员尺寸一样，则无法看到效果</p><ul><li><code>CrossAxisAlignment.start</code>：交叉轴靠前</li><li><code>CrossAxisAlignment.end</code>：交叉轴靠后</li><li><code>CrossAxisAlignment.center</code>：默认值，居中</li><li><code>CrossAxisAlignment.stretch</code>：在交叉轴上进行拉伸填充</li><li><code>CrossAxisAlignment.baseline</code>：根据基线对齐（仅限 <code>Text</code>，且要求 <code>textBaseline</code> 属性设置为 <code>TextBaseline.alphabetic</code>）</li></ul><h2 id="flexible" tabindex="-1"><a class="header-anchor" href="#flexible" aria-hidden="true">#</a> Flexible</h2><p><code>Flexible</code> 包裹一个 <code>Widget</code>，可以让这个 <code>Widget</code> 变得可以调整大小。此时这个 <code>Widget</code> 就成为了 <code>Flexible</code> 的子节点，并被视为 <code>flexible</code>。可通过调整其 <code>flex</code> 和 <code>fit</code> 属性来调整大小</p><ul><li><code>flex</code>：将自身的 <code>flex</code> 因子与其他的比较，以决定自身占剩余空间的比例</li><li><code>fit</code>：决定 <code>Flexible</code> 的 <code>Widget</code> 是否能够填充所有剩余空间。有以下两个可选值 <ul><li><code>FlexFit.loose</code>：默认值，使用自身作为首选大小</li><li><code>FlexFit.tight</code>：强制充满所有剩余空间</li></ul></li></ul><h2 id="expanded" tabindex="-1"><a class="header-anchor" href="#expanded" aria-hidden="true">#</a> Expanded</h2><p><code>Expanded</code> 与 <code>Flexible</code> 类似，不过它是强制占满剩余空间</p><h2 id="sizedbox" tabindex="-1"><a class="header-anchor" href="#sizedbox" aria-hidden="true">#</a> SizedBox</h2><p><code>SizedBox</code> 用于创建精确的尺寸，其 <code>widget</code> 和 <code>height</code> 属性用于创建大小</p><ul><li>当其包裹有子元素时，子元素会根据 <code>SizedBox</code> 的尺寸变化</li><li>没有子元素时，则创建一个空的空间</li></ul><h2 id="spacer" tabindex="-1"><a class="header-anchor" href="#spacer" aria-hidden="true">#</a> Spacer</h2><p><code>Spacer</code> 和 <code>SizedBox</code> 类似，也能创建空间，不过它是基于 <code>flex</code> 属性创建的，且其无法包裹子元素</p><h2 id="container" tabindex="-1"><a class="header-anchor" href="#container" aria-hidden="true">#</a> Container</h2><p>可以添加 <code>padding</code>、<code>margin</code>、<code>border</code>、<code>background</code> 等属性，只有一个子元素，但这个子元素可以是 <code>Row</code>、<code>Column</code>、<code>根 widget</code></p><p>其子元素将会自动充满所有剩余空间，即使是 <code>Text</code> 也一样</p><p>其装饰属性通过 <code>decoration</code> 属性表示，其中的 <code>borderRadius</code> 与 <code>shape: BoxShape.circle</code> 同时使用，因为会冲突</p><p>示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">{</span>
        decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>
            <span class="token comment">// 其背景色通过 color 表示</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span>
            border<span class="token punctuation">:</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span>
            borderRadius<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token class-name">Radius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;123&#39;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gridview" tabindex="-1"><a class="header-anchor" href="#gridview" aria-hidden="true">#</a> GridView</h2><p>用于创建网格，其支持滚动。基础用法示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">(</span>
    gridDelegate<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中主要的参数 <code>gridDelegate</code> 有两个可选值</p><ul><li><code>SliverGridDelegateWithFixedCrossAxisCount</code>：用于固定列数的场景，其包含的参数如下 <ul><li><code>crossAxisCount</code>：列数，即一行有几个子元素</li><li><code>mainAxisSpacing</code>：主轴方向上的间距</li><li><code>crossAxisSpacing</code>：交叉轴方向上的间距</li><li><code>childAspectRatio</code>：子元素的宽高比例，当子元素宽高比不为 1 时，需要设置</li></ul></li><li><code>SliverGridDelegateWithMaxCrossAxisExtent</code>：用于子元素有最大宽度限制的场景，其包含的参数如下 <ul><li><code>maxCrossAxisExtent</code>：子元素最大的宽度</li><li><code>mainAxisSpacing</code>：主轴方向上的间距</li><li><code>crossAxisSpacing</code>：交叉轴方向上的间距</li><li><code>childAspectRatio</code>：子元素的宽高比例，当子元素宽高比不为 1 时，需要设置</li></ul></li></ul><h3 id="gridview-count-和-gridview-extent" tabindex="-1"><a class="header-anchor" href="#gridview-count-和-gridview-extent" aria-hidden="true">#</a> GridView.count 和 GridView.extent</h3><p>分别为上面两个参数的简便写法。示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>
    crossAxisCount<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    mainAxisSpacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    crossAxisSpacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span>
<span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">extent</span><span class="token punctuation">(</span>
    maxCrossAxisExtent<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    mainAxisSpacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    crossAxisSpacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gridview-builder" tabindex="-1"><a class="header-anchor" href="#gridview-builder" aria-hidden="true">#</a> GridView.builder()</h3><p>用于生成大量网格的场景，其会对列表进行优化。基本用法示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
    gridDelegate<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span>
    itemCount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
            decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>
                color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span>
                border<span class="token punctuation">:</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="listview" tabindex="-1"><a class="header-anchor" href="#listview" aria-hidden="true">#</a> ListView</h2><p>与 <code>Column</code> 类似，但其支持滚动</p><p>基本参数如下</p><ul><li><code>scrollDirection</code>：列表滚动方向，可选值为 <code>Axis.horizontal</code>（默认值）、<code>Axis.horizontal</code></li><li><code>controller</code>：控制器，与列表滚动相关，如监听列表的滚动事件</li><li><code>physics</code>：列表滚动到边缘后继续拖动的物理效果。当列表的长度没有填满屏幕时，会无法触发滑动效果，从而导致无法上拉和下拉，此时需要手动将该值设置为以下一项，建议设置为 <code>AlwaysScrollableScrollPhysics</code><ul><li><code>ClampingScrollPhysics</code>：<code>Android</code> 平台默认效果</li><li><code>BouncingScrollPhysics</code>：<code>iOS</code> 平台默认效果</li><li><code>AlwaysScrollableScrollPhysics</code>：跟随各自平台效果</li><li><code>NeverScrollableScrollPhysics</code>：禁用拖动效果</li></ul></li><li><code>shrinkWrap</code>：决定列表的长度是否仅包裹其内容的长度。当 <code>ListView</code> 嵌在一个无限长的容器中时，必须设置为 <code>true</code></li><li><code>padding</code>：内边距</li><li><code>itemExtent</code>：子元素长度。当每一项的长度是固定时，可以指定该值，有助于提高性能</li><li><code>cacheExtent</code>：预渲染区域长度。<code>ListView</code> 会在其可视区域的两边留一个 <code>cacheExtent</code> 长度的区域作为预渲染区域（对于 <code>ListView.build</code> 或 <code>ListView.separated</code> 构造函数创建的列表，不在可视区域和预渲染区域内的子元素不会被创建或会被销毁）</li><li><code>children</code>：子元素</li></ul><h3 id="listview-builder" tabindex="-1"><a class="header-anchor" href="#listview-builder" aria-hidden="true">#</a> ListView.builder()</h3><p>用于生成大量列表的场景，会对长列表进行优化。基本用法示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
    itemCount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContet</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
            decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>
                color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span>
                border<span class="token punctuation">:</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="listview-separated" tabindex="-1"><a class="header-anchor" href="#listview-separated" aria-hidden="true">#</a> ListView.separated()</h3><p>带分割线的 <code>ListView</code></p><p>与 <code>ListView.builder()</code> 一样，不过多了一个 <code>separatorBuilder</code> 必填参数，用于定义分割线组件。示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>
    itemCount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
            decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>
                color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span>
                border<span class="token punctuation">:</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span>
            height<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
            indent<span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">,</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blur
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下拉刷新" tabindex="-1"><a class="header-anchor" href="#下拉刷新" aria-hidden="true">#</a> 下拉刷新</h3><p>使用内置的 <code>RefreshIndicator</code> 组件。基本用法示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">RefreshIndicator</span><span class="token punctuation">(</span>
    onRefresh<span class="token punctuation">:</span> onRefresh<span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
        itemCount<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
                decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>
                    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span>
                    border<span class="token punctuation">:</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上拉加载" tabindex="-1"><a class="header-anchor" href="#上拉加载" aria-hidden="true">#</a> 上拉加载</h3><p>没有内置的组件，需要自己完成，需要用到前面提到的 <code>controller</code> 属性。基本代码示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>
    controller<span class="token punctuation">:</span> scrollController<span class="token punctuation">,</span> <span class="token comment">// 监听事件</span>
    itemCount<span class="token punctuation">:</span> list<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 元素加多 1 个，用于渲染加载提示</span>
    separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">.5</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">NewsCard</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 手动加入加载提示</span>
            <span class="token keyword">return</span> <span class="token function">renderBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> Stack</h2><p>被 <code>Stack</code> 组件包裹的子元素将会堆叠在一起，排在后面的元素的会在上面，可通过 <code>alignment</code> 属性调整除第一个元素外的其他元素的堆叠位置</p><h2 id="positioned" tabindex="-1"><a class="header-anchor" href="#positioned" aria-hidden="true">#</a> Positioned</h2><p><code>Stack</code> 通常搭配 <code>Positioned</code> 使用，<code>Positioned</code> 用于设置其子元素的位置</p><h2 id="fractionallysizedbox" tabindex="-1"><a class="header-anchor" href="#fractionallysizedbox" aria-hidden="true">#</a> FractionallySizedBox</h2><p>可以将一个组件的尺寸设置为其父级的百分比，虽然 <code>Center</code>、<code>Align</code> 都有相应的缩放属性，但是它们两个容易受到父级约束的影响，因此尽量使用 <code>FractionallySizedBox</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FractionallySizedBox</span><span class="token punctuation">(</span>
    widthFactor<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 将子级的宽度设置为父级宽度的 50%</span>
    heightFactor<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 将子级的高度设置为父级高度的 50%</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="visibility" tabindex="-1"><a class="header-anchor" href="#visibility" aria-hidden="true">#</a> Visibility</h2><p>该组件可根据某个变量来设置其子组件是否显示</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Visibility</span><span class="token punctuation">(</span>
  visible<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
    <span class="token string-literal"><span class="token string">&#39;Your text here&#39;</span></span><span class="token punctuation">,</span>
    style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="refreshindicator" tabindex="-1"><a class="header-anchor" href="#refreshindicator" aria-hidden="true">#</a> RefreshIndicator</h2><p>该组件用于下拉刷新</p><p>一个很常见的情况是，下拉的图标已消失，但是数据还未返回，原因是 <code>setState</code> 和 <code>onRefresh</code> 是互斥的，此时需要通过 <code>StreamBuilder</code> 来实现</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:async&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">DiyBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> getData<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> data<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> onData<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token class-name">DiyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>getData<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>onData<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DiyBuilder</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_DiyBuilderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _DiyBuilderState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DiyBuilder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> listData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> isLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> loadStatus <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;more&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> totalPages <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> isRefresh <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&gt;</span></span> _streamController <span class="token operator">=</span> <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_beforeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      listData <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;records&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      listData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>listData<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;records&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    totalPages <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;totalPages&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNo <span class="token operator">&gt;=</span> totalPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      loadStatus <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;no&#39;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      loadStatus <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;more&#39;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _streamController<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    isRefresh <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    isLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">_beforeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> widget<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 必须与 _getData() 分开写，否则下拉刷新的图标会立即消失</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">_onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">_beforeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    isRefresh <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> widget<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token comment">// 为避免退出页面时仍发送中的请求，需要使用 Future.wait 等待</span>
    <span class="token comment">// 后续发现，即使不添加也不会导致报错，不知为何原因</span>
    <span class="token comment">// 如确需取消 Future，建议使用 async 包（非 dart 自带的 async），示例见后面章节</span>
    <span class="token comment">// await Future.wait([_getData(), _onRefresh()]);</span>
    _streamController<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">RefreshIndicator</span><span class="token punctuation">(</span>
      onRefresh<span class="token punctuation">:</span> _onRefresh<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">StreamBuilder</span><span class="token punctuation">(</span>
        stream<span class="token punctuation">:</span> _streamController<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token operator">?</span> data <span class="token operator">=</span> snapshot<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
          <span class="token comment">// 判断数据是否存在</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasData <span class="token operator">&amp;&amp;</span> data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;加载中...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="notification" tabindex="-1"><a class="header-anchor" href="#notification" aria-hidden="true">#</a> Notification</h2><p><code>Notification</code> 用于实现组件之间的通信，不需要通过父子组件传递数据。当一个 <code>Notification</code> 被触发时，<code>Flutter</code> 会自动地沿着当前组件树向上传递通知，直到遇到处理这个通知的组件为止。用法示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 定义通知</span>
<span class="token keyword">class</span> <span class="token class-name">MyNotification</span> <span class="token keyword">extends</span> <span class="token class-name">Notification</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
  <span class="token class-name">MyNotification</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接收通知的组件</span>
<span class="token keyword">class</span> <span class="token class-name">MyWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>
      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyNotification</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Tap here&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理通知的组件</span>
<span class="token keyword">class</span> <span class="token class-name">MyListenerWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
      onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span>notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理通知</span>
        <span class="token function">print</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Notification Listener&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在父组件中组合 MyWidget 和 MyListenerWidget</span>
<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      home<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
        body<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token class-name">MyWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">MyListenerWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="form" tabindex="-1"><a class="header-anchor" href="#form" aria-hidden="true">#</a> Form</h2><p><code>Form</code> 是一个内置的表单组件，通过给它的 <code>key</code> 属性配置一个值，然后可以通过该值调用其中的一些方法，如表单验证</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
<span class="token keyword">class</span> <span class="token class-name">FormWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">FormWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FormWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_FormWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _FormWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FormWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> _formKey <span class="token operator">=</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FormState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Form</span><span class="token punctuation">(</span>
        key<span class="token punctuation">:</span> _formKey<span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
            <span class="token class-name">TextFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>
              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>_formKey<span class="token punctuation">.</span>currentState<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token class-name">DiyToast</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;提交成功&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;提交&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="textformfield" tabindex="-1"><a class="header-anchor" href="#textformfield" aria-hidden="true">#</a> TextFormField</h3><p>该组件通常搭配 <code>Form</code> 组件使用，注意它自带的验证信息会影响布局，因此用的时候要根据实际情况考虑是否自定义验证</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">TextFormField</span><span class="token punctuation">(</span>
    focusNode<span class="token punctuation">:</span> _focusNode<span class="token punctuation">,</span>
    controller<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span>
    decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>
        border<span class="token punctuation">:</span> <span class="token class-name">InputBorder</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span>
        hintText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;placeholder 文本&#39;</span></span><span class="token punctuation">,</span>
        hiteStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        validator<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&#39;请输入手机号码&#39;</span></span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        errorStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 可通过将验证失败提示文本的大小设置为 0 来避免布局变换</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bottomnavigationbar" tabindex="-1"><a class="header-anchor" href="#bottomnavigationbar" aria-hidden="true">#</a> BottomNavigationBar</h2><p>该组件用来实现底部的 <code>tabbar</code> 效果，通过 <code>IndexedStack</code> 来管理页面的堆栈，这样，每次切换选项时，只有当前页面会被重新构建，而其他页面会保持在堆栈中</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;./pages/order/main/index.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;./pages/service/main/index.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;./pages/home/main/index.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;./pages/user/main/index.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">TabbarWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">TabbarWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabbarWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_TabbarWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _TabbarWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabbarWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  int _selectedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> _widgetOptions <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
    <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">OrderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">ServicePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">UserPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_onItemTapped</span><span class="token punctuation">(</span>int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _selectedIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
      body<span class="token punctuation">:</span> <span class="token class-name">IndexedStack</span><span class="token punctuation">(</span>
        index<span class="token punctuation">:</span> _selectedIndex<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> _widgetOptions<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      bottomNavigationBar<span class="token punctuation">:</span> <span class="token class-name">BottomNavigationBar</span><span class="token punctuation">(</span>
        items<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BottomNavigationBarItem</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
          <span class="token class-name">BottomNavigationBarItem</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>home<span class="token punctuation">)</span><span class="token punctuation">,</span>
            label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;首页&#39;</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">BottomNavigationBarItem</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>list_alt<span class="token punctuation">)</span><span class="token punctuation">,</span>
            label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;订单&#39;</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">BottomNavigationBarItem</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>face<span class="token punctuation">)</span><span class="token punctuation">,</span>
            label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;服务&#39;</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">BottomNavigationBarItem</span><span class="token punctuation">(</span>
            icon<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span>
            label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;我的&#39;</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        currentIndex<span class="token punctuation">:</span> _selectedIndex<span class="token punctuation">,</span>
        selectedItemColor<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>primaryColor<span class="token punctuation">,</span>
        unselectedItemColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>
        onTap<span class="token punctuation">:</span> _onItemTapped<span class="token punctuation">,</span>
        type<span class="token punctuation">:</span> <span class="token class-name">BottomNavigationBarType</span><span class="token punctuation">.</span>fixed<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="safearea" tabindex="-1"><a class="header-anchor" href="#safearea" aria-hidden="true">#</a> SafeArea</h2><p>用于处理屏幕上的安全区域。安全区域是指屏幕边缘周围的区域，用于避免内容与设备边缘重叠，例如刘海、屏幕凹口、状态栏和底部导航栏等</p><p>它会自动适应设备的安全区域，并将其内部的内容放置在安全区域内，以确保内容不会被遮挡或覆盖。它通常用作其他组件的父级组件，以确保这些组件在安全区域内进行布局</p><h2 id="willpopscope" tabindex="-1"><a class="header-anchor" href="#willpopscope" aria-hidden="true">#</a> WillPopScope</h2><p><code>WillPopScope</code> 组件，用于拦截返回按钮，用法示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">LoginPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">WillPopScope</span><span class="token punctuation">(</span>
      onWillPop<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>

        <span class="token comment">// 返回 false 以阻止页面返回</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
        body<span class="token punctuation">:</span>  <span class="token class-name">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;登录页面&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="singlechildscrollview" tabindex="-1"><a class="header-anchor" href="#singlechildscrollview" aria-hidden="true">#</a> SingleChildScrollView</h2><p>当软键盘弹起导致页面超出范围时，使用改组件包裹页面其他组件即可</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      home<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
          title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Keyboard Overflow Example&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        body<span class="token punctuation">:</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>
            padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
              children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                <span class="token comment">// 页面内容</span>
                <span class="token class-name">TextField</span><span class="token punctuation">(</span>
                  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>
                    labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Input 1&#39;</span></span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">TextField</span><span class="token punctuation">(</span>
                  decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>
                    labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Input 2&#39;</span></span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 添加更多的页面内容</span>
              <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tabbar" tabindex="-1"><a class="header-anchor" href="#tabbar" aria-hidden="true">#</a> TabBar</h2><p>该组件用于实现常见的 <code>tabs</code> 切换效果。基础示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">TabWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">TabWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_TabWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _TabWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabWidget</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span> <span class="token class-name">TickerProviderStateMixin</span> <span class="token punctuation">{</span>
  late <span class="token class-name">TabController</span> _tabController<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _tabController <span class="token operator">=</span> <span class="token class-name">TabController</span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _tabController<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token class-name">TabBar</span><span class="token punctuation">(</span>
          controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>
          tabs<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token class-name">Tab</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;首页&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Tab</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;资讯&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Tab</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;推荐&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Expanded</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">TabBarView</span><span class="token punctuation">(</span>
            controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>
            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
              <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;首页&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;资讯&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;推荐&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,122);function o(i,l){return s(),a("div",null,[t(" @format "),c])}const d=n(p,[["render",o],["__file","1.html.vue"]]);export{d as default};
