import{_ as n,p as s,q as a,R as t,a1 as p}from"./framework-49860b1b.js";const e={},c=p(`<h1 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h1><p>使用基础的 <code>http</code> 包</p><p>需要配置权限</p><ul><li>安卓：在 <code>AndroidManifest.xml</code> 文件里面添加权限 <code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter pub add http
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// get</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// post</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span><span class="token punctuation">&gt;</span></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> headers<span class="token punctuation">,</span> body<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">:</span> headers<span class="token punctuation">,</span> body<span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据转换" tabindex="-1"><a class="header-anchor" href="#数据转换" aria-hidden="true">#</a> 数据转换</h2><p><code>flutter</code> 中需要手动编写数据转换类，将 <code>http.Response</code> 转换成 <code>dart</code> 对象。示例如下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Album</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> int userId<span class="token punctuation">;</span>
  <span class="token keyword">final</span> int id<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token class-name">Album</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>userId<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">factory</span> <span class="token class-name">Album</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Album</span><span class="token punctuation">(</span>
      userId<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;userId&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      id<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;id&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      title<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;title&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Album</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> response <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;url&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Album</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;failed to load album&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取数据" tabindex="-1"><a class="header-anchor" href="#获取数据" aria-hidden="true">#</a> 获取数据</h2><p>在组件的 <code>initState()</code> 或 <code>didChangeDependencies()</code> 中调用</p><p>注意，仅 <code>StatefulWidget</code> 组件有效，若想在 <code>StatelessWidget</code> 使用数据，相当于从父组件调用接口获取数据，然后再传入 <code>StatelessWidget</code> 子组件</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _MyAppState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyApp</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    late <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Album</span><span class="token punctuation">&gt;</span></span> futureAlbum<span class="token punctuation">;</span>

    <span class="token metadata function">@override</span>
    <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        futureAlbum <span class="token operator">=</span> <span class="token function">getAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="显示数据" tabindex="-1"><a class="header-anchor" href="#显示数据" aria-hidden="true">#</a> 显示数据</h2><p>官网的示例中，初始化 <code>futureAlbum</code> 是使用了 <code>late</code> 且并未赋值，是在 <code>initState()</code> 中获取数据的，若不在 <code>initState()</code> 中获取数据（如通过点击事件获取），则需要为 <code>futureAlbum</code> 赋值（通常赋空值），并且在使用时判断 <code>futureAlbum</code> 是否为空</p><h3 id="使用-futurebuilder-组件" tabindex="-1"><a class="header-anchor" href="#使用-futurebuilder-组件" aria-hidden="true">#</a> 使用 FutureBuilder 组件</h3><p>这是一个 <code>fltter</code> 内置的专门用于处理异步数据的组件</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _MyAppState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyApp</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Album</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> futureAlbum<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">_handleTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            futureAlbum <span class="token operator">=</span> <span class="token function">getAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token metadata function">@override</span>
    <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FutureBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Album</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
            future<span class="token punctuation">:</span> futureAlbum<span class="token punctuation">,</span>
            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>data<span class="token operator">!</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">snapshot<span class="token punctuation">.</span>error</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 默认状态下的显示</span>
                <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义使用数据" tabindex="-1"><a class="header-anchor" href="#自定义使用数据" aria-hidden="true">#</a> 自定义使用数据</h3><p>将数据值当作普通变量使用，自行处理数据</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _MyAppState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyApp</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Album</span><span class="token operator">?</span> album<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">_handleTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">getAlbum</span><span class="token punctuation">(</span>_counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                album <span class="token operator">=</span> value<span class="token punctuation">;</span>
                _counter<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token metadata function">@override</span>
    <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>album <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;loading...&#39;</span></span> <span class="token punctuation">:</span> album<span class="token operator">!</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="简单封装如下" tabindex="-1"><a class="header-anchor" href="#简单封装如下" aria-hidden="true">#</a> 简单封装如下</h2><p>需要注意请求头</p><ul><li>若 <code>Content-Type</code> 为 <code>application/json</code>，则 <code>post</code> 发送的数据需要进行 <code>jsonEncode</code> 编码</li><li>若 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>，则 <code>post</code> 发送的数据无需进行编码，直接发送 <code>Map&lt;String, String&gt;{}</code> 即可</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// config.dart</span>
<span class="token keyword">const</span> baseUrl <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;https://jsonplaceholder.typicode.com&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baseHeaders <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;Content-Type&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;application/json; charset=UTF-8&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// http.dart</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter_framework/config.dart&#39;</span></span> <span class="token operator">as</span> cfg<span class="token punctuation">;</span>

<span class="token keyword">var</span> baseUrl <span class="token operator">=</span> cfg<span class="token punctuation">.</span>baseUrl<span class="token punctuation">;</span>
<span class="token keyword">var</span> baseHeaders <span class="token operator">=</span> cfg<span class="token punctuation">.</span>baseHeaders<span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token function">queryParams</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;?&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  data<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">key</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span>isNotEmpty <span class="token operator">?</span> prefix <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;&amp;&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Future</span> <span class="token function">requestInterceptors</span><span class="token punctuation">(</span>
    <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> params<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> newHeaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;Authorization&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Bearer </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">token</span></span><span class="token string">&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>baseHeaders<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>newHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> targetUrl <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">baseUrl</span></span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">url</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;get&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    targetUrl <span class="token operator">=</span> targetUrl <span class="token operator">+</span> <span class="token function">queryParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;url&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;headers&#39;</span></span><span class="token punctuation">:</span> headers<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;body&#39;</span></span><span class="token punctuation">:</span> params<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DiyHttp</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> params<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> map <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestInterceptors</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;get&#39;</span></span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;url&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        headers<span class="token punctuation">:</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;headers&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span><span class="token punctuation">&gt;</span></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> params<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> headers<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> map <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestInterceptors</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;post&#39;</span></span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;url&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        headers<span class="token punctuation">:</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;headers&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;body&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function o(l,i){return s(),a("div",null,[t(" @format "),c])}const k=n(e,[["render",o],["__file","8.html.vue"]]);export{k as default};
