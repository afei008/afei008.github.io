import{_ as n,p as a,q as s,a1 as p}from"./framework-49860b1b.js";const t={},e=p(`<h1 id="diff-算法详解" tabindex="-1"><a class="header-anchor" href="#diff-算法详解" aria-hidden="true">#</a> diff 算法详解</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>Vue 中的 key 是用来做什么的？为什么不推荐使用 index 作为 key？</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>假设有如下列表</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的虚拟 dom 大概如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设更新后，我们把子节点的顺序调换一下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先响应式数据更新后，触发了<code>渲染watcher</code>的回调函数<code>vm._update(vm._render())</code>去驱动视图更新</p><p><code>vm._render()</code>其实就是生成的 vnode，<code>vm._udpate</code>就会带着新的 vnode 去触发<code>__patch__</code>过程</p><p>下面之间进入这个 patch 过程</p><h3 id="不是相同节点" tabindex="-1"><a class="header-anchor" href="#不是相同节点" aria-hidden="true">#</a> 不是相同节点</h3><p>直接销毁旧的 vnode，渲染新的 vnode，这也解释了为什么 diff 是同层对比</p><h3 id="是相同节点-要尽可能的做节点的复用-都是-ul-进入" tabindex="-1"><a class="header-anchor" href="#是相同节点-要尽可能的做节点的复用-都是-ul-进入" aria-hidden="true">#</a> 是相同节点，要尽可能的做节点的复用（都是 ul，进入）</h3><p>会调用<code>src/core/vdom/patch.js</code>下的<code>patchVnode</code>方法</p><ul><li>如果新 vnode 是文字 vnode：直接调用浏览器的 api 把节点替换掉文字内容</li><li>如果新 vnode 不是文字 vnode <ul><li>如果有新 children 而没有 children：说明是新增 children，直接 addVnodes 添加新子节点</li><li>如果有旧 children 而没有新 children：说明是删除 children，直接 removeVnodes 删除旧子节点</li><li>如果新旧 children 都存在（都存在 li 子节点列表，进入） 此时就是我们 diff 算法考察的核心点，也就是新旧节点的 diff 过程</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 旧首节点</span>
<span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 新首节点</span>
<span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 旧尾节点</span>
<span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
<span class="token comment">// 新尾节点</span>
<span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

<span class="token comment">// 判断节点是否可用的函数，可以看到key是关键</span>
<span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>diff 过程就是一个循环过程，每一轮都是统一的对比，其中某一项命中了，就递归进入 patchVnode 针对单个 vnode 进行的过程</p><ul><li>旧首节点和新首节点用 sameNode 对比</li><li>旧尾节点和新首节点用 sameNode 对比</li><li>旧首节点和新尾节点用 sameNode 对比</li><li>旧尾节点和新尾节点用 sameNode 对比</li><li>如果以上逻辑都匹配不到，再把所有旧子节点的 key 做一个映射表，然后用新 vnode 的 key 去找出在旧节点中可以复用的位置</li></ul><p>然后不停的把匹配到的指针向内部收缩，直到新旧节点有一端的指针相遇，说明这个端的节点都被 patch 过了。在指针相遇以后，还有两种比较特殊的情况：</p><ul><li>有新节点要加如 如果更新完以后，<code>oldStartIdx &gt; oldEndIdx</code>，说明旧节点都被 patch 完了，但是有可能还有新的节点没有被处理到，接着回去判断是否要新增子节点</li><li>有旧节点要删除 如果新节点先 patch 完了，那么此时会走<code>newStartIdx &gt; newEndIdx</code>的逻辑，那么就会去删除多余的旧子节点</li></ul><h2 id="为什么不要用-index-作为-key" tabindex="-1"><a class="header-anchor" href="#为什么不要用-index-作为-key" aria-hidden="true">#</a> 为什么不要用 index 作为 key</h2><p>因为 key 的顺序没变，但是值却变了，这会导致一个问题：无法复用现有节点，从而导致多余的更新</p><p>解释： 按照最合理的逻辑来说，旧的第一个 vnode 应该是直接复用新的第三个 vnode</p><p>在子节点 diff 过程中，会在旧首节点和新首节点用 sameNode 对比，因为两者的 key 此时都是 0，所以会进入该逻辑，进行 patchVnode 操作，在 patchVnode 的时候检查到 props 改变了（原来是 1，现在变成了 3），然后会触发重渲染</p><h2 id="为什么不要用随机数作为-key" tabindex="-1"><a class="header-anchor" href="#为什么不要用随机数作为-key" aria-hidden="true">#</a> 为什么不要用随机数作为 key</h2><p>随机数做 key 的话，会进入到 diff 过程最后一步，因为所有 key 都不相同，此时会进入这个流程：<code>123 -&gt; 先重新创建3个子组件 -&gt; 321123 -&gt; 删除、销毁后面3个子组件 -&gt; 312</code></p>`,29),o=[e];function l(c,i){return a(),s("div",null,o)}const u=n(t,[["render",l],["__file","5.html.vue"]]);export{u as default};
