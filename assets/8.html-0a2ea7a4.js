import{_ as n,p as s,q as a,a1 as t}from"./framework-49860b1b.js";const e={},p=t(`<h1 id="数组的监听" tabindex="-1"><a class="header-anchor" href="#数组的监听" aria-hidden="true">#</a> 数组的监听</h1><h2 id="误区" tabindex="-1"><a class="header-anchor" href="#误区" aria-hidden="true">#</a> 误区</h2><p>vue2 不能检查到下面数组的变化</p><ul><li>直接用索引设置元素，如<code>vm.items[0]={}</code></li><li>修改数据的长度，如<code>vm.items.length = 0</code></li></ul><p>vue2 其实是可以实现数组响应式的，作者没实现是因为：性能代码与用户体验收益不成正比（作者原话）</p><h2 id="包装方法" tabindex="-1"><a class="header-anchor" href="#包装方法" aria-hidden="true">#</a> 包装方法</h2><p>vue 通过重新包装了数据中数组的常用方法，使得调用这些方法的时候数据可以实现响应</p><p>方法包括</p><ul><li>push</li><li>pop</li><li>shift</li><li>unshift</li><li>splice</li><li>sort</li><li>reverse</li></ul><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><p>相关源码在这</p><ul><li>observe/array-augmentations.js</li><li>observe/observer.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> aryMeghods <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;reverse&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arrayAugmentations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
aryMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 原生array原型方法</span>
    <span class="token keyword">let</span> original <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 将 push 等封装好的方法定义在对象 arrayAugmentations 的属性上（非原型属性）</span>
    arrayAugmentations<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用对应的原生方法并返回结果</span>
        <span class="token keyword">return</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 将要监听的数组的原型指向上面定义的数组</span>
<span class="token comment">// 若不能使用\`__proto__\`，则直接给实例数组绑定包装过的方法</span>
list<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> arrayAugmentations<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","8.html.vue"]]);export{r as default};
