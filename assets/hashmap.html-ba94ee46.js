import{_ as n,p as s,q as a,a1 as e}from"./framework-49860b1b.js";const p={},t=e(`<h1 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h1><p>哈希表、散列表，是字典的一种散列表实现方式，将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法，这样在计算机中查找更快</p><h2 id="核心" tabindex="-1"><a class="header-anchor" href="#核心" aria-hidden="true">#</a> 核心</h2><p>散列函数是散列表的核心，使用散列函数能够返回一个值的具体位置，因此能快速查找到值</p><h2 id="散列函数" tabindex="-1"><a class="header-anchor" href="#散列函数" aria-hidden="true">#</a> 散列函数</h2><h3 id="lose-lose-散列函数" tabindex="-1"><a class="header-anchor" href="#lose-lose-散列函数" aria-hidden="true">#</a> lose lose 散列函数</h3><p>最常见的散列函数，简单的将每个键值中的每个字母的 ASCII 值相加</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loselose</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hash <span class="token operator">+=</span> key<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 避免值超过最大数，将 hash 与任意一个数取余</span>
    <span class="token keyword">return</span> hash <span class="token operator">%</span> <span class="token number">37</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="djb2-散列函数" tabindex="-1"><a class="header-anchor" href="#djb2-散列函数" aria-hidden="true">#</a> djb2 散列函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">djb2</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 大多数实现都用 5381</span>
    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">5381</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将 hash 与 33 相乘，再加上当前字符的 ASCII 值</span>
        hash <span class="token operator">=</span> hash <span class="token operator">*</span> <span class="token number">33</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 与一个比散列表大小要大的随机质数取余，此处认为散列表大小为 1000</span>
    <span class="token keyword">return</span> hash <span class="token operator">%</span> <span class="token number">1013</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冲突处理" tabindex="-1"><a class="header-anchor" href="#冲突处理" aria-hidden="true">#</a> 冲突处理</h2><p>使用散列函数有时会产生冲突，因为不同的键产生的 hash 可能相同，常见的冲突处理方法有三种</p><ul><li>分离链接</li><li>线性探查</li><li>双散列法</li></ul>`,13),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","hashmap.html.vue"]]);export{u as default};
