import{_ as a,p as s,q as n,a1 as e}from"./framework-49860b1b.js";const t={},c=e(`<h1 id="异步加载-js" tabindex="-1"><a class="header-anchor" href="#异步加载-js" aria-hidden="true">#</a> 异步加载 js</h1><h2 id="async-属性-仅适用于外部脚本" tabindex="-1"><a class="header-anchor" href="#async-属性-仅适用于外部脚本" aria-hidden="true">#</a> async 属性（仅适用于外部脚本）</h2><ul><li>对于普通脚本，如果存在 async 属性，那么普通脚本会被并行请求，并尽快解析和执行</li><li>对于模块脚本，如果存在 async 属性，那么脚本及其所有依赖都会在延缓队列中执行，因此它们会被并行请求，并尽快解析和执行。</li></ul><p>该属性的脚本不会按照页面中的顺序来执行，而是谁先加载完成谁执行。意思就是，带有该属性的脚本会并行加载，并且加载完成后就执行，执行的时候会暂停页面渲染</p><p>示例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="defer-属性" tabindex="-1"><a class="header-anchor" href="#defer-属性" aria-hidden="true">#</a> defer 属性</h2><p>在文档解析完成后执行（在触发 DOMContentLoaded 事件前执行）。因为有 defer 属性的脚本会阻止 DOMContentLoaded 事件，直到脚本被加载且完成解析</p><h2 id="type-module" tabindex="-1"><a class="header-anchor" href="#type-module" aria-hidden="true">#</a> type=&quot;module&quot;</h2><p>带有该属性的脚本将被视为 js 模块，不受 async 和 defer 属性的影响</p>`,10),p=[c];function o(l,r){return s(),n("div",null,p)}const i=a(t,[["render",o],["__file","4.html.vue"]]);export{i as default};
