import{_ as n,p as a,q as s,R as e,a1 as t}from"./framework-49860b1b.js";const o={},c=t(`<h1 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h1><p><code>Flutter</code> 中的动画分为两类</p><ul><li>补间动画：定义了起点、终点、时间轴、过渡时间、速度曲线，然后框架会自动计算如何从起点过渡到终点</li><li>基于物理基础的动画：动作是模拟真实世界的行为来进行建模的，如现实世界中的抛物线</li></ul><h2 id="animation" tabindex="-1"><a class="header-anchor" href="#animation" aria-hidden="true">#</a> Animation</h2><p>动画系统的首要组成部分为 <code>Animation</code> 类。一个动画表现为可在它的生命周期内发生变化的特定类型的值。大多数需要执行动画的组件都需要接收一个 <code>Animation</code> 对象作为参数，从而能从中获取到动画的当前状态值以及英国监听哪些具体值的更改</p><h3 id="addlistener" tabindex="-1"><a class="header-anchor" href="#addlistener" aria-hidden="true">#</a> addListener</h3><p>每当动画的状态值发生改变时，动画都会通知所有通过 <code>addListener</code> 添加的监听器。一个正在监听动画的 <code>State</code> 对象会调用自身的 <code>setState</code> 方法，将自身传入这些监听器的回调函数来通知组件需要根据新状态值进行重新构建</p><p>有个两个组件可以帮助其他组件在动画改变值时进行重新构建</p><ul><li><code>AnimatedWidget</code>：对于无状态动画组件来说是尤其有用。要使用它，只需继承它并实现一个 <code>build</code> 方法</li><li><code>AnimationBuilder</code>：对于希望将动画作为复杂组件的 <code>build</code> 方法的其中一部分的情况非常有用。要使用它，只需构造组件并将 <code>AnimationBuilder</code> 传递给组件的 <code>builder</code> 方法</li></ul><h3 id="addstatuslistener" tabindex="-1"><a class="header-anchor" href="#addstatuslistener" aria-hidden="true">#</a> addStatusListener</h3><p><code>AnimationStatus</code> 表示动画将如何随时间进行变化。当动画的状态发生变化时，动画都会通知所有通过 <code>addStatusListener</code> 添加的监听器</p><ul><li>通常情况下，动画会从 <code>dismissed</code> 状态开始，表示它主语变化区间的开始点</li><li>下一状态可能是 <code>forward</code>（从 0 到 1） 或 <code>reverse</code>（从 1 到 0）</li><li>最终动画到达其区间的结束点，则会变成 <code>completed</code> 状态</li></ul><h2 id="animationcontroller" tabindex="-1"><a class="header-anchor" href="#animationcontroller" aria-hidden="true">#</a> AnimationController</h2><p>要创建动画，首先要创建一个 <code>AnimationController</code>，除了作为动画本身，还可以用来控制动画</p><p>一旦创建了一个动画控制器，就可以基于它来构建其他动画，如</p><ul><li>创建一个 <code>ReverseAnimation</code>，效果是复制一个动画，但是将其反向运行</li><li>创建一个 <code>CurvedAnimation</code>，效果是用 <code>Curve</code> 来调整动画的值</li></ul><h2 id="补间动画" tabindex="-1"><a class="header-anchor" href="#补间动画" aria-hidden="true">#</a> 补间动画</h2><p>想要在 0 到 1 的区间之外设置动画，可以使用 <code>Tween&lt;T&gt;</code>，它可以在它的 <code>begin</code> 值和 <code>end</code> 值之间进行插值补间。</p><p>许多类都有特定的 <code>Tween</code> 子类，它们能提供基于特定类型的插值行为，如</p><ul><li><code>ColorTween</code> 可以在颜色间进行差值</li><li><code>RectTween</code> 可以在矩形之间进行插值</li></ul><p>可以创建自己的 <code>Tween</code> 子类并覆盖其 <code>lerp</code> 方法来定义自己的补间动画</p><p>补间动画本身只定义了如何在两个值之间进行插值，要获取动画当前帧的具体值，还需要一个动画来确定当前状态。有两种方法可以将补间动画与动画组合在一起以获得动画的具体值</p><ul><li>用 <code>evaluate</code> 方法处理动画的当前值从而得到对应的插值。这种方法对于已经监听动画并因此在动画改变值时重新构建的组件最有效</li><li>用 <code>animate</code> 方法处理一个动画。该方法返回一个包含补间动画插值的新的 <code>Animation</code>。这种方法对于当你想要将新创建的动画提供给另一个组件时最有效，它可以直接读取包含补间动画的插值以及监听对应插值的更改</li></ul><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><p>动画实际上是由许多核心模块共同构建的</p><ul><li>调度器：<code>SchedulerBinding</code> 是一个暴露出 <code>Flutter</code> 调度原语的单例类。每当一帧需要显示时，引擎会触发一个 <code>开始帧</code> 回调，调度程序会将其多路传输给所有使用 <code>scheduleFrameCallback()</code> 注册的监听器</li><li>运行器：<code>Ticker</code> 类挂载在调度器的 <code>scheduleFrameCallback()</code> 的机制上，来达到每次运行都会触发回调的效果</li><li>模拟器：<code>Simulation</code> 抽象类将相对时间值（运行时间）映射为双精度值，并且有完成的概念。针对不同的效果，<code>Simulation</code> 类有各种具体实现</li><li><code>Animatables</code> 抽象类将双精度值映射为特定类型的值，它是无状态和不可变的。将 <code>Animatable&lt;double&gt;</code>（父类）传递给一个 <code>Animatable</code> 的 <code>chain()</code> 方法会创建一个新的 <code>Animatable</code> 子类，这个子类会先应用父类的映射，然后应用子类的映射</li><li>曲线：<code>Curve</code> 抽象类映射范围 0.0-1.0 的双精度值，它是无状态和不可变的</li></ul><blockquote><p>上面的都是些基本概念，与官网上的一样</p></blockquote><h2 id="一个简单的示例" tabindex="-1"><a class="header-anchor" href="#一个简单的示例" aria-hidden="true">#</a> 一个简单的示例</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyAnimatedWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  _MyAnimatedWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MyAnimatedWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _MyAnimatedWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyAnimatedWidget</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">with</span> <span class="token class-name">SingleTickerProviderStateMixin</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义动画函数</span>
  late <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> _animation<span class="token punctuation">;</span>
  <span class="token comment">// 定义控制器</span>
  late <span class="token class-name">AnimationController</span> _controller<span class="token punctuation">;</span>
  <span class="token comment">// 定义补间动画，此处只是一个时间范围，需要结合 animate 才能使用（在下面的 scale 属性处）</span>
  <span class="token comment">// 如果多个属性的补间动画不同，需要分别指定</span>
  <span class="token keyword">final</span> _tween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化控制器和动画函数</span>
    _controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>
      duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>reverse<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _animation <span class="token operator">=</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span> curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>linear<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _controller<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>
      animation<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Widget</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Transform</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>
          scale<span class="token punctuation">:</span> _tween<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>_animation<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
            width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
            height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="主动画-hero" tabindex="-1"><a class="header-anchor" href="#主动画-hero" aria-hidden="true">#</a> 主动画（Hero）</h2><p><code>Hero</code> 指的是在不同页面间飞跃的 <code>widget</code></p><blockquote><p>可以简单理解为 <code>CSS</code> 的 <code>transition</code></p></blockquote><ul><li>标准 <code>hero</code> 动画：一个标准 <code>hero</code> 动画使 <code>hero</code> 从一个页面飞到新页面，通常以不同大小到达不同的目的地</li><li>径向 <code>hero</code> 动画：在径向 <code>hero</code> 动画中，随着 <code>hero</code> 在页面间飞翔，它的形状也会由圆形变成矩形</li></ul><p><code>Hero</code> 动画需要使用两个 <code>Hero widgets</code> 来完成，一个在原页面中，另一个在目标页面中。<code>Hero</code> 动画代码有如下结构</p><ul><li>定义一个起始 <code>Hero widget</code>，称为 <code>source hero</code>。该 <code>hero</code> 指定图形表示（通常是图像），以及识别标签，并且在由原页面定义的当前显示的 <code>widget</code> 树中</li><li>定义一个终止 <code>Hero widget</code>，称为 <code>destination hero</code>。该 hero 也指定图形表示，并与 <code>source hero</code> 使用同样的标签（<strong>一般来讲，起始和终止几乎有完全一样的 <code>widget</code> 树</strong>）</li><li>创建一个含有 <code>destination hero</code> 的页面。目标页面定义了动画结束时应有的 <code>widget</code> 树</li><li>通过推送目标页面到 <code>Navigator</code> 堆栈来触发动画。 <code>Navigator</code> 推送并弹出操作触发原页面和目标页面中含有配对标签 <code>heroes</code> 的 <code>hero</code> 动画</li></ul><p>通过 <code>tween</code> 来界定 <code>Hero</code> 从起点到终点的界限（插入的大小和位置），并在图层上执行动画</p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>简单来讲就是有一个中间层在执行动画，起始和目标页仅存放起始和终止的 <code>widget</code></p><h2 id="交织动画-staggered" tabindex="-1"><a class="header-anchor" href="#交织动画-staggered" aria-hidden="true">#</a> 交织动画（Staggered）</h2><p>交织动画是一个简单的概念：视觉变化是随着一系列的动作发生，而不是一次性的动作。动画可能是纯粹顺序的，一个改变随着一个改变发生，动画也可能是部分或者全部重叠的。动画也可能有间隙，没有变化发生</p><blockquote><p>可以简单理解为 <code>CSS</code> 中的 <code>animation</code>，通常使用 <code>AnimationController</code> 来创建，方便控制动画，参照前面的示例</p></blockquote>`,41);function i(p,l){return a(),s("div",null,[e(" @format "),c])}const u=n(o,[["render",i],["__file","3.html.vue"]]);export{u as default};
