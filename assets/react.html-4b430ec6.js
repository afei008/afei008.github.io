import{_ as n,p as s,q as a,a1 as t}from"./framework-49860b1b.js";const e={},p=t(`<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> react</h1><h2 id="数据绑定" tabindex="-1"><a class="header-anchor" href="#数据绑定" aria-hidden="true">#</a> 数据绑定</h2><p>react 没有数据绑定，而是通过对比更新前后的数据状态来进行更新，参考下文的 diffing 算法</p><h2 id="事件绑定与原生的区别" tabindex="-1"><a class="header-anchor" href="#事件绑定与原生的区别" aria-hidden="true">#</a> 事件绑定与原生的区别</h2><p>react 中的事件为合成事件，通过初始化使它们在不同的浏览器中拥有一致的属性，使用 naviteEvent 属性可获取对应的原生事件(e.naviteEvent)</p><ol><li>无法通过 return false 阻止默认行为，必须显示使用 preventDefault</li><li>react 的事件处理函数都在冒泡阶段被触发，如需注册捕获阶段的函数，需为事件名添加 Capture，如 onClickCapture</li><li>react 没有将事件真正的绑定到 DOM 上，而是在 document 处监听所有事件，当事件触发时，使用统一的分发函数执行指定事件函数</li></ol><h2 id="props-与-state-的区别" tabindex="-1"><a class="header-anchor" href="#props-与-state-的区别" aria-hidden="true">#</a> props 与 state 的区别</h2><p>一个重要的不同点：props 是传递给组件的，类似于函数的形参，而 state 是在组件内部，被组件自己管理的，类似于函数内部声明的变量</p><table><thead><tr><th></th><th>props</th><th>state</th></tr></thead><tbody><tr><td>从父组件获取值</td><td>是</td><td>是</td></tr><tr><td>由父组件更改</td><td>是</td><td>否</td></tr><tr><td>在组件内部设置默认值</td><td>是</td><td>是</td></tr><tr><td>在组件内部更改</td><td>否</td><td>是</td></tr><tr><td>为子组件设置初始值</td><td>是</td><td>是</td></tr><tr><td>更改子组件</td><td>是</td><td>否</td></tr></tbody></table><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>Mounting、Updating、Unmounting</p><h3 id="mounting-挂载" tabindex="-1"><a class="header-anchor" href="#mounting-挂载" aria-hidden="true">#</a> Mounting（挂载）</h3><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下</p><h4 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h4><p>避免在构造函数中引入任何副作用或订阅，如果不初始化 state 或不进行方法绑定，则不需要为组件实现构造函数，构造函数仅用于以下两种情况</p><ul><li>通过给 this.state 赋值对象来初始化内部 state</li><li>为事件处理函数绑定实例</li></ul><h4 id="static-getderivedstatefromprops-不常用" tabindex="-1"><a class="header-anchor" href="#static-getderivedstatefromprops-不常用" aria-hidden="true">#</a> static getDerivedStateFromProps()（不常用）</h4><p>每次渲染都会被调用，该函数返回一个对象来更新 state，如果返回 null 则不更新任何内容</p><p>此方法适用于罕见用例，即 state 的值在任何时候都取决于 props。如实现 <code>&lt;Transition&gt;</code> 组件</p><p>由于此方法会产生派生状态，从而导致代码冗余，且组件难以维护，因此尽量使用如下方法替代</p><ul><li>如果需要执行副作用，以响应 props 中的更改，请改用 componentDidUpdate</li><li>如果只想在 prop 更改时重新计算某些数据，请使用 memoization helper 代替</li><li>如果你想在 prop 更改时重置某些 state，请考虑使组件完全受控或使用 key 使组件完全不受控代替</li></ul><h4 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render()</h4><p>class 组件中唯一必须实现的方法，应该为纯函数，当 render 被调用时，它会检查 this.props 和 this.state 的变化并返回以下类型之一：</p><ul><li>React 元素：通常通过 JSX 创建</li><li>数组或 fragments：使得 render 方法可以返回多个元素。fragments，即 <code>&lt;Fragment /&gt;</code></li><li>Portals：可以渲染子节点到不同的 DOM 子树中</li><li>字符串或数值类型：会被渲染为文本节点</li><li>布尔类型或 null：什么都不渲染</li></ul><h4 id="componentdidmount" tabindex="-1"><a class="header-anchor" href="#componentdidmount" aria-hidden="true">#</a> componentDidMount()</h4><p>在组件挂载后立即调用，依赖于 DOM 节点的初始化放在此处</p><h3 id="updating-更新" tabindex="-1"><a class="header-anchor" href="#updating-更新" aria-hidden="true">#</a> Updating（更新）</h3><p>当组件的 props 或 state 发生变化时会出发更新，调用顺序如下</p><h4 id="static-getderivedstatefromprops" tabindex="-1"><a class="header-anchor" href="#static-getderivedstatefromprops" aria-hidden="true">#</a> static getDerivedStateFromProps()</h4><h4 id="shouldcomponentupdate-不常用" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate-不常用" aria-hidden="true">#</a> shouldComponentUpdate()（不常用）</h4><p>此方法仅作为性能优化的方法而存在</p><p>根据该函数的返回值，默认为 true，判断组件的输出是否受当前 state 或 props 更改的影响，默认行为是 state 每次变化都会重新渲染</p><p>当该函数返回 false，则不会调用 render()，所以也不会调用 componentDidUpdate()</p><h4 id="render-1" tabindex="-1"><a class="header-anchor" href="#render-1" aria-hidden="true">#</a> render()</h4><h4 id="getsnapshotbeforeupdate-不常用" tabindex="-1"><a class="header-anchor" href="#getsnapshotbeforeupdate-不常用" aria-hidden="true">#</a> getSnapshotBeforeUpdate() （不常用）</h4><p>在最近一次更新渲染输出之前调用，它使得组件能在发生更改之前从 DOM 中捕获一些信息（如滚动位置）</p><h4 id="componentdidupdate" tabindex="-1"><a class="header-anchor" href="#componentdidupdate" aria-hidden="true">#</a> componentDidUpdate()</h4><p>当组件更新后立即调用，首次渲染不会执行此方法，如果组件实现了 getSnapshotBeforeUpdate()，则它的返回值将作为 componentDidUpdate() 的第三个参数 snapshot 参数传递</p><h3 id="unmounting-卸载" tabindex="-1"><a class="header-anchor" href="#unmounting-卸载" aria-hidden="true">#</a> Unmounting（卸载）</h3><p>当组件从 DOM 中移除时会调用</p><h4 id="componentwillunmount" tabindex="-1"><a class="header-anchor" href="#componentwillunmount" aria-hidden="true">#</a> componentWillUnmount()</h4><p>在组件卸载及销毁之前调用</p><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h2><p>Error boundaries 是 react 组件，它会在其子组件树中的任何位置捕获 js 错误，并记录这些错误，展示降级 UI 而不是崩溃的组件树</p><p>当渲染过程、生命周期、子组件的构造函数中抛出错误时，会调用，当组件定义了以下两个方法时（任何一个或者两个），它就成为了 Error boundaries</p><p>仅将该组件用于处理从意外异常中恢复的情况，不要将他们用于流程控制，仅捕获组件中的错误，自身的错误无法捕获</p><h3 id="static-getderivedstatefromerror" tabindex="-1"><a class="header-anchor" href="#static-getderivedstatefromerror" aria-hidden="true">#</a> static getDerivedStateFromError()</h3><p>该方法在渲染阶段调用，因此不允许出现副作用</p><h3 id="componentdidcatch" tabindex="-1"><a class="header-anchor" href="#componentdidcatch" aria-hidden="true">#</a> componentDidCatch()</h3><p>该方法在提交阶段被调用，因此可以出现副作用</p><p>该方法在组件抛出错误后被调用，接收两个参数：</p><ol><li>error：抛出的错误</li><li>info：带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息</li></ol><h2 id="其他两个-api" tabindex="-1"><a class="header-anchor" href="#其他两个-api" aria-hidden="true">#</a> 其他两个 API</h2><p>这两个方法是在组件中手动调用的</p><h3 id="setstate" tabindex="-1"><a class="header-anchor" href="#setstate" aria-hidden="true">#</a> setState()</h3><h3 id="forceupdate" tabindex="-1"><a class="header-anchor" href="#forceupdate" aria-hidden="true">#</a> forceUpdate()</h3><p>调用该方法将强制更新组件，会跳过 shouldComponentUpdate()，尽量避免使用该方法，应该按照正常流程</p><h2 id="react-hook-对应的生命周期" tabindex="-1"><a class="header-anchor" href="#react-hook-对应的生命周期" aria-hidden="true">#</a> react hook 对应的生命周期</h2><table><thead><tr><th>class 组件</th><th>hooks 组件</th></tr></thead><tbody><tr><td>constructor</td><td>useState</td></tr><tr><td>getDerivedStateFromProps</td><td>useState 里面的 update 函数</td></tr><tr><td>shouldComponentUpdate</td><td>useMemo</td></tr><tr><td>render</td><td>函数本身</td></tr><tr><td>componentDidMount</td><td>useEffect</td></tr><tr><td>componentDidUpdate</td><td>useEffect</td></tr><tr><td>componentWillUnmount</td><td>useEffect 里面的返回函数</td></tr><tr><td>componentDidCatch</td><td>暂无</td></tr><tr><td>getDerivedStateFromError</td><td>暂无</td></tr></tbody></table><h2 id="常用-hook-介绍" tabindex="-1"><a class="header-anchor" href="#常用-hook-介绍" aria-hidden="true">#</a> 常用 hook 介绍</h2><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3><p>第一个参数为一个函数，第二个参数为一个变化参数数组</p><p>当第二个参数传入空数组 [] 时，将只执行一次，此时对应 componentDidMount</p><p>当第二个参数不传时，则对应 componentDidUpdate，将会在每次更新之后都调用，当第二个参数传入一个带值的数组，则只在该值变化时才更新</p><p>第一个参数的返回函数对应 componentWillUnMount，该清除机制实际上是清除上一个 effect 的结果，在清除之后才执行更新</p><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h3><p>该钩子主要用来初始化 state，对应了 constructor，函数式组件不需要构造函数，此处只是简单的对应</p><p>同时也可以实现 getDerivedStateFromProps，记住 getDerivedStateFromProps 的作用：在每次渲染的时候都会调用，但仅在返回 true 时才更新，所以可以用以下代码模拟实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">scrollview</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> row <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>isScrollDown<span class="token punctuation">,</span> setIsScrollDown<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>prevRow<span class="token punctuation">,</span> setPrevRow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">!==</span> prevRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setIsScrollDown</span><span class="token punctuation">(</span>prevRow <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">&gt;</span> prevRow<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setPrevRow</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">scrolling down: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>isScrollDown<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext</h3><p>用来获取 React.createContext 的值，此时可以不通过 Context.Consumer 来获取值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 跨文件组件使用时，需要使用公共 context 文件</span>
<span class="token comment">// 公共文件 context.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Context<span class="token punctuation">;</span>
<span class="token comment">// 父组件</span>
<span class="token keyword">import</span> Context <span class="token keyword">from</span> <span class="token string">&#39;./context.js&#39;</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>Context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Context<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// 子组件</span>
<span class="token keyword">import</span> Context <span class="token keyword">from</span> <span class="token string">&#39;./context.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 若未使用 useContext 则需要通过以下写法来获取值</span>
<span class="token operator">&lt;</span>Context<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Context<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer" aria-hidden="true">#</a> useReducer</h3><p>语法：<code>const [state, dispatch] = useReducer(reducer, initialState, init)</code></p><ol><li>useState 的替代方案，接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 及配套的 dispatch（类似 redux）</li></ol><blockquote><p>dispatch 函数是稳定的，不会在组件重新渲染时改变，所以可以安全的从 useEffect 和 useCallback 依赖列表中省略 disptach</p></blockquote><p><strong>普通初始化</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;increment&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;decrement&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;reset&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>增加count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>惰性初始化</strong></p><p>传入第三个参数，此时初始值会被设置为 init(initialState)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">initialState <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> initialState <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;increment&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;decrement&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;reset&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">init</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;reset&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> initialState <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>重置count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>增加count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>可以用来模拟 forceUpdate，但尽量避免使用</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>ignored<span class="token punctuation">,</span> forceUpdate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> useCallback</h3><p>返回一个记忆化的回调函数</p><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 仅当第二个参数的依赖项（a，b）不改变时才返回同一个函数</span>
<span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">doSomeTime</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 如果要记住一个变化的值，需要 useRef 配合</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 写入 ref</span>
    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从 ref 读取</span>
    <span class="token keyword">const</span> currentText <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ref<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useCallback(fn, inputs)</code>，全等于 <code>useMemo(() =&gt; fn, inputs)</code></p><p>useCallback 返回函数，useMemo 返回值</p><h3 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo" aria-hidden="true">#</a> useMemo</h3><p>返回一个记忆化的值，相当于 vue 的计算属性（computed），仅当某个属性变化时才重新计算</p><p>语法 <code>const func = useMemo(()=&gt;fn, inputs)</code></p><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h3><p>返回一个可变的 ref 对象，它的 current 属性被初始化为传入的参数，ref 对象在组件的整个生命周期内保持不变</p><p>语法 <code>const ref = useRef(initialValue)</code></p><h3 id="useimperativehandle" tabindex="-1"><a class="header-anchor" href="#useimperativehandle" aria-hidden="true">#</a> useImperativeHandle</h3><p>让你在使用 ref 时自定义暴露给父组件的实例值，在大多数情况下，应当避免使用 ref 这样的命令式代码，该函数应当与 forwardRef 一起使用，因为 ref 无法直接挂载到函数式组件上，被挂载的组件需要使用 forwardRef 包裹</p><p>语法 <code>useImperativeHandle(ref, createHandle, [inputs])</code></p><p>说明：</p><ul><li>ref：一个 ref 对象，通常由 useRef() 生成</li><li>createHandle：回调函数，必须有返回值，返回值通常为对象</li><li>[inputs]：依赖列表</li></ul><h3 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect" aria-hidden="true">#</a> useLayoutEffect</h3><p>与 useEffect 相同，但仅在所有 DOM 变更之后才同步调用 effect，当使用 useEffect 出现问题后，才考虑使用 useLayoutEffect</p><p><strong>执行时机</strong></p><ul><li>useLayoutEffect 执行在类组件生命周期前</li><li>useEffect 执行在类组件生命周期后</li></ul><p><strong>渲染</strong></p><ul><li>useLayoutEffect 同步渲染，会阻塞 DOM</li><li>useEffect 异步渲染，不会阻塞 DOM</li></ul><h2 id="实现-shouldcomponentupdate" tabindex="-1"><a class="header-anchor" href="#实现-shouldcomponentupdate" aria-hidden="true">#</a> 实现 shouldComponentUpdate</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 组件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟-dom-及内核" tabindex="-1"><a class="header-anchor" href="#虚拟-dom-及内核" aria-hidden="true">#</a> 虚拟 DOM 及内核</h2><p>一种编程概念，UI 以一种虚拟的形式被保存在内存中。通俗的讲：通过某种算法，将真实的 DOM，转换成某个变量，然后将其存放在内存中，当需要时，再转换成真实的 DOM</p><p>react 中，react 元素与 fibers 内部对象被认为是虚拟 DOM 实现的一部分</p><ul><li>react 元素：最小单元，是个普通对象，如 <code>const element = &lt;h1&gt;hello, world&lt;/h1&gt;;</code></li><li>fibers 对象：react 内部对象，用于存放组件树的附加信息</li></ul><p>Shadow DOM：一种浏览器技术，在 web 组件中封装变量和 css Virtual DOM：由 js 类库基于浏览器 API 实现的概念</p><h3 id="diffing-算法" tabindex="-1"><a class="header-anchor" href="#diffing-算法" aria-hidden="true">#</a> diffing 算法</h3><p>两个假设的基础：</p><ol><li>两个不同类型的元素会产生出不同的树</li><li>开发者可以通过 key prop 来暗示哪些子元素在不同的渲染下能保持稳定</li></ol><p>当对比两颗树时，首先比较两棵树的根节点，不同类型的根节点元素会有不同的形态</p><ul><li>当根节点为不同类型的元素时，拆卸原有的树，并建立新树，其中的 DOM 节点也将被销毁</li><li>当根节点为相同类型的元素时，保留 DOM 节点，仅对比有改变的属性，然后递归子节点</li></ul><h3 id="对比同类型的组件元素" tabindex="-1"><a class="header-anchor" href="#对比同类型的组件元素" aria-hidden="true">#</a> 对比同类型的组件元素</h3><p>当一个组件更新时，组件实例保持不变，react 将更新该组件实例的 props 以跟最新的元素保持一致</p><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><ul><li>保持 DOM 结构的稳定，尽可能的减少动态操作 DOM 结构</li><li>尽量选择 css 隐藏或显示，而不是真的移除或添加节点</li><li>酌情使用 shouldComponentUpdate() 来减少不必要的更新</li><li>结构类似的尽量封装成组件</li><li>对于列表结构，尽量减少节点移动操作</li></ul><h2 id="通信" tabindex="-1"><a class="header-anchor" href="#通信" aria-hidden="true">#</a> 通信</h2><h3 id="父向子通信" tabindex="-1"><a class="header-anchor" href="#父向子通信" aria-hidden="true">#</a> 父向子通信</h3><p>父组件通过 props 向子组件传递</p><h3 id="子向父通信" tabindex="-1"><a class="header-anchor" href="#子向父通信" aria-hidden="true">#</a> 子向父通信</h3><p>父组件向子组件传递函数，子组件调用该函数并返回值，父组件接收该返回值</p><h3 id="兄弟通信" tabindex="-1"><a class="header-anchor" href="#兄弟通信" aria-hidden="true">#</a> 兄弟通信</h3><p>通过相同的父组件来实现</p><h3 id="跨级通信" tabindex="-1"><a class="header-anchor" href="#跨级通信" aria-hidden="true">#</a> 跨级通信</h3><p>使用 Context，具体见下文</p><p>示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建 context</span>
<span class="token keyword">const</span> PriceContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// A 组件</span>
<span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 点击事件</span>
    <span class="token function">clickGoods</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">price</span><span class="token operator">:</span> e<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> price <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token comment">// 传递 price</span>
            <span class="token operator">&lt;</span>PriceContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>price<span class="token punctuation">}</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickGoods</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                    goods1
                <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickGoods</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                    goods2
                <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>PriceContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// B 组件</span>
<span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>price<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>ClassC <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// C 组件</span>
<span class="token keyword">class</span> <span class="token class-name">ClassC</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token comment">// Consumer 需要包含一个函数</span>
            <span class="token operator">&lt;</span>PriceContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>
                <span class="token punctuation">{</span><span class="token parameter">price</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>PriceContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><p>Context 提供了一种无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法</p><h3 id="何时使用" tabindex="-1"><a class="header-anchor" href="#何时使用" aria-hidden="true">#</a> 何时使用</h3><p>对于某个组件树而言，属于全局的数据，它的所有子组件都要访问同一批数据，并且能访问到后续的更新</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个 context，默认值 light</span>
<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;light&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 Provider 将当前的 theme 传递给以下的组件树，无论多深，都可以读取这个值</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">&#39;dark&#39;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 中间组件无需再次传递 theme</span>
<span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ThemeButton <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">ThemeButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指定 contextType 读取当前的 theme context</span>
    <span class="token comment">// react 会往上找到最近的 theme Provider，然后使用他们的值</span>
    <span class="token keyword">static</span> contextType <span class="token operator">=</span> ThemeContext<span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>Button theme<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>contextType<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主要-api" tabindex="-1"><a class="header-anchor" href="#主要-api" aria-hidden="true">#</a> 主要 API</h3><ul><li><p>React.createContext</p><p>创建 context：<code>const MyContext = React.createContext(&#39;value&#39;)</code></p></li><li><p>Context.Provider</p><p>每个 context 都会包含一个 Provider 组件，通过该组件传递值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;MyContext.Provider value=&#39;value&#39;&gt;
    // 组件
&lt;/MyContext.Provider&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件通过 MyContext 获取值，react 会自动寻找最近的 Provider 作为值</p></li><li><p>Context.Consumer</p><p>订阅 context 的改变，需要一个函数式组件作为子元素，该函数接收 context 的当前值，并返回一个 react 节点</p></li></ul>`,140),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","react.html.vue"]]);export{u as default};
