import{_ as n,p as s,q as a,a1 as p}from"./framework-49860b1b.js";const e={},t=p(`<h1 id="原型及原型链" tabindex="-1"><a class="header-anchor" href="#原型及原型链" aria-hidden="true">#</a> 原型及原型链</h1><h2 id="proto-和-prototype-分别是什么" tabindex="-1"><a class="header-anchor" href="#proto-和-prototype-分别是什么" aria-hidden="true">#</a> proto 和 prototype 分别是什么</h2><ul><li>proto 为 JavaScript 的对象特殊的内置属性，是对于其他对象的引用，就是说谁创建了这个对象，该属性就指向谁。官方写法为：<code>[[Prototype]]</code>，不可直接获取，浏览器实现为：<code>__proto__</code>。</li><li>prototype 当通过构造函数调用方式创建对象实例时，生成的实例对象的<code>__proto__</code>属性指向(函数.prototype)这个对象，<code>Foo.prototype</code>：这是一个对象</li></ul><h2 id="object-再往上是-null" tabindex="-1"><a class="header-anchor" href="#object-再往上是-null" aria-hidden="true">#</a> object 再往上是 null</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="以下情况-proto-和-prototype-指向同一个" tabindex="-1"><a class="header-anchor" href="#以下情况-proto-和-prototype-指向同一个" aria-hidden="true">#</a> 以下情况，<code>__proto__</code> 和 prototype 指向同一个</h2><ul><li><code>Function.__proto__ === Function.prototype</code></li><li><code>arr.__proto__ === Array.prototype;</code></li><li>其他手动修改的方式</li></ul><h3 id="原型链断裂" tabindex="-1"><a class="header-anchor" href="#原型链断裂" aria-hidden="true">#</a> 原型链断裂</h3><p>原型链断裂之后将无法通过原型链获取原型链上的属性、方法</p><h2 id="js-原型链继承及实现" tabindex="-1"><a class="header-anchor" href="#js-原型链继承及实现" aria-hidden="true">#</a> js 原型链继承及实现</h2><p>js prototype 对象实现原型链及继承</p><p>js 的继承其实是委托，实例只是指向父对象，本身并不具有父对象的属性和方法，不像其他语言那样通过类似拷贝的方式创建实例</p><p>父类</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h3><p>特点</p><ul><li>实例继承：实例的构造函数的属性、父类构造函数属性、父类原型属性</li><li>父类新增原型方法、属性，所有子类都能访问</li></ul><p>缺点</p><ul><li>创建实例时无法向父类构造函数传参</li><li>所有实例都共享父类原型的属性，一旦修改原型属性，则所有实例都会变化</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;ker&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 主要</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> son1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
son1<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// 10</span>
son1 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数继承" tabindex="-1"><a class="header-anchor" href="#构造函数继承" aria-hidden="true">#</a> 构造函数继承</h3><p>特点</p><ul><li>只继承父类构造函数的属性，没有继承父类原型的属性</li><li>解决了原型链继承的缺点</li><li>可以继承多个构造函数属性（call 多个）</li><li>在子实例中可以向父实例传参</li></ul><p>缺点</p><ul><li>只能继承父类构造函数的属性</li><li>无法实现构造函数的复用，每个新实例都有父类构造函数的副本</li><li>实例并不是父类的实例，只是子类的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Son2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重点</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> son2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
son2<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// Tom</span>
son2 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span>； <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合继承-组合原型链继承和构造函数继承-常用" tabindex="-1"><a class="header-anchor" href="#组合继承-组合原型链继承和构造函数继承-常用" aria-hidden="true">#</a> 组合继承（组合原型链继承和构造函数继承，常用）</h3><p>特点</p><ul><li>可以继承父类原型上的属性，可传参，可复用</li><li>每个实例引入的构造函数属性是私有的</li><li>即是子类的实例，也是父类的实例</li></ul><p>缺点：调用了两次父类构造函数，生成两份实例，子类构造函数会代替原型上的父类构造实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Son3</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 借用构造函数继承</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 原型链继承</span>
<span class="token comment">// 第一次调用父类构造函数</span>
<span class="token class-name">Son3</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// new Son3 的时候，构造函数内部第二次调用父类构造函数</span>
<span class="token keyword">var</span> son3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son3</span><span class="token punctuation">(</span><span class="token string">&#39;gar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
son3<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// gar</span>
son3 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型式继承-object-create-就是这个原理" tabindex="-1"><a class="header-anchor" href="#原型式继承-object-create-就是这个原理" aria-hidden="true">#</a> 原型式继承（Object.create() 就是这个原理）</h3><p>特点：类似于复制一个对象，用函数来包装</p><p>缺点</p><ul><li>所有实例都会继承原型上的属性</li><li>无法实现复用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重点，封装一个函数容器，用来输出对象和承载继承的原型</span>
<span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 创建父类实例</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> son4 <span class="token operator">=</span> <span class="token function">content</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
son4<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// 10</span>
son4 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="寄生式继承-就是给原型式继承在外面套个壳子" tabindex="-1"><a class="header-anchor" href="#寄生式继承-就是给原型式继承在外面套个壳子" aria-hidden="true">#</a> 寄生式继承（就是给原型式继承在外面套个壳子）</h3><p>特点：没有创建自定义类型，只是套个壳子返回对象，这个函数就创建了新对象</p><p>缺点：没有用到原型，无法复用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 以上为原型式继承，给原型式继承再套个壳子传递参数</span>
<span class="token keyword">function</span> <span class="token function">Son5</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> sub <span class="token operator">=</span> <span class="token function">content</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sub<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;gar&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sub<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> son5 <span class="token operator">=</span> <span class="token function">Son5</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
son5 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
son5 <span class="token keyword">instanceof</span> <span class="token class-name">Son5</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="寄生组合式继承-常用" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承-常用" aria-hidden="true">#</a> 寄生组合式继承（常用）</h3><p>解决了组合式继承两次调用构造函数属性的缺点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 寄生</span>
<span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// con 实例的原型继承了父类函数的原型，更像原型链继承，只不过只继承了原型属性</span>
<span class="token keyword">var</span> con <span class="token operator">=</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 组合</span>
<span class="token keyword">function</span> <span class="token function">Son6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 继承了父类构造函数的属性</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 重点</span>
<span class="token comment">// 继承了 con 实例</span>
<span class="token class-name">Son6</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> con<span class="token punctuation">;</span>
<span class="token comment">// 修复 constructor 指向</span>
con<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son6<span class="token punctuation">;</span>
<span class="token comment">// Son6 的实例就继承了构造函数属性，父类实例，con 的函数属性</span>
<span class="token keyword">var</span> son6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
son6 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
son6 <span class="token keyword">instanceof</span> <span class="token class-name">Son6</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","prototype-and-prototype-chain.html.vue"]]);export{r as default};
