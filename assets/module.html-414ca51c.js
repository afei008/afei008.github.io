import{_ as a,p as s,q as n,a1 as t}from"./framework-49860b1b.js";const e={},p=t(`<h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import-函数" tabindex="-1"><a class="header-anchor" href="#import-函数" aria-hidden="true">#</a> import() 函数</h2><ul><li>运行时执行，动态加载模块</li><li>与 import 命令接受的参数一样</li><li>返回一个 Promise 对象</li><li>可用在任何地方，不仅仅三模块，非模块的脚本也可以使用</li><li>类似 require 方法，区别是：import() 是异步加载，require() 是同步加载</li></ul><p>适用场合</p><ul><li>按需加载</li><li>条件加载</li><li>动态的模块路径</li></ul><h2 id="加载实现" tabindex="-1"><a class="header-anchor" href="#加载实现" aria-hidden="true">#</a> 加载实现</h2><h3 id="浏览器加载" tabindex="-1"><a class="header-anchor" href="#浏览器加载" aria-hidden="true">#</a> 浏览器加载</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 等同于 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步加载，不会阻塞浏览器，等到页面渲染完成，再执行模块脚本。如果有多个 type=&quot;module&quot;，它们会按照在页面出现的顺序执行，如果使用了 async 属性，则不会按照页面出现的顺序执行，而是模块加载完成就执行</p><h3 id="内嵌写法" tabindex="-1"><a class="header-anchor" href="#内嵌写法" aria-hidden="true">#</a> 内嵌写法</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对于外部的模块脚本" tabindex="-1"><a class="header-anchor" href="#对于外部的模块脚本" aria-hidden="true">#</a> 对于外部的模块脚本：</h2><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行，模块内部的顶层变量，外部不可见</li><li>模块脚本自动采用严格模式</li><li>模块之中，可以使用 import 命令加载其他模块，也可使用 export 命令</li><li>模块之中，顶层的 this 关键字返回 undefined</li><li>同一个模块如果加载多次，将只执行一次</li></ul><h2 id="es6-模块-与-commonjs-模块的差异" tabindex="-1"><a class="header-anchor" href="#es6-模块-与-commonjs-模块的差异" aria-hidden="true">#</a> es6 模块 与 commonjs 模块的差异</h2><ul><li>commonjs 模块输出的是一个值的拷贝，es6 模块输出的是值的引用</li><li>commonjs 模块是运行时加载，es6 模块是编译时输出接口</li></ul>`,16),l=[p];function o(c,i){return s(),n("div",null,l)}const r=a(e,[["render",o],["__file","module.html.vue"]]);export{r as default};
