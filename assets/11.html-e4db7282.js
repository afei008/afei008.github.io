import{_ as n,p as s,q as a,R as e,a1 as t}from"./framework-49860b1b.js";const p={},c=t(`<h1 id="async-包" tabindex="-1"><a class="header-anchor" href="#async-包" aria-hidden="true">#</a> async 包</h1><p>一个异步包，增强了 <code>dart:async</code></p><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:async/async.dart&#39;</span></span><span class="token punctuation">;</span>
​
<span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
​
  <span class="token metadata function">@override</span>
  _HomePageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_HomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">class</span> _HomePageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// 自定义 Future</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">_myFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&#39;Future completed&#39;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
​
  <span class="token class-name">CancelableOperation</span><span class="token operator">?</span> _myCancelableFuture<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 CancelableOperation 创建新的 Future</span>
    _myCancelableFuture <span class="token operator">=</span> <span class="token class-name">CancelableOperation</span><span class="token punctuation">.</span><span class="token function">fromFuture</span><span class="token punctuation">(</span>
      <span class="token function">_myFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      onCancel<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Future has been canceld&#39;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这个 value 为自定义 Future 的返回值</span>
    <span class="token keyword">final</span> value <span class="token operator">=</span> <span class="token keyword">await</span> _myCancelableFuture<span class="token operator">?</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token comment">// 后续可以执行其他操作</span>
  <span class="token punctuation">}</span>
​
  <span class="token keyword">void</span> <span class="token function">_cancelFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个 value 为取消 Future 之后的返回值</span>
    <span class="token keyword">final</span> value <span class="token operator">=</span> <span class="token keyword">await</span> _myCancelableFuture<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function o(l,i){return s(),a("div",null,[e(" @format "),c])}const r=n(p,[["render",o],["__file","11.html.vue"]]);export{r as default};
