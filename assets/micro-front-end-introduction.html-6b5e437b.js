import{_ as a,M as t,p as r,q as n,Q as o,t as l,N as d,V as h,a1 as i}from"./framework-49860b1b.js";const u={},c=i('<h1 id="微前端简介" tabindex="-1"><a class="header-anchor" href="#微前端简介" aria-hidden="true">#</a> 微前端简介</h1><p>微前端的概念由微服务衍生而来：一种由独立交付的多个前端应用组成整体的架构风格。具体的，将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，而在用户看来仍然是内聚的单个产品</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><p>类似于微服务</p><p>关键优势在于</p><ul><li>代码库更小，更内聚、可维护性更高</li><li>松耦合、自治的团队可扩展性更好</li><li>渐进地升级、更新，甚至重写部分前端功能成为了可能</li><li>各个子应用直接技术栈无关，独立部署</li></ul><h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案" aria-hidden="true">#</a> 实现方案</h2>',7),p=i('<ul><li><p>多个 bundle 如何集成</p><ul><li>服务端集成：如 SSR 拼装模板</li><li>构建时集成：如 Code Splitting</li><li>运行时集成：如 iframe、js 前端路由、web components 等</li></ul></li><li><p>子应用之间怎样隔离影响</p><ul><li>样式隔离</li><li>js 隔离</li></ul></li><li><p>公共资源如何复用</p><ul><li>基础资源</li><li>UI 组件</li><li>业务组件</li></ul><p>公共资源比较推荐的模式是开源软件的管理模式：所有人都能补充公共资源，但有人负责监管，以保证质量、一致性、正确性</p></li><li><p>子应用间怎样通信</p><ul><li>通过自定义事件间接通信是一种避免直接耦合的常用方式</li><li>路由参数通信</li></ul><p>无论采用哪种方式，都应该尽可能减少子应用间的通信，以避免大量弱依赖造成的强耦合</p></li><li><p>如何测试 每个子应用都应该有自己的全套测试方案，特殊之处在于，除单元测试、功能测试外，还要有集成测试</p><ul><li>集成测试：保证子应用间集成的正确性，比如跨子应用的交互操作</li><li>功能测试：保证页面组装的正确性</li><li>单元测试：保证底层业务逻辑和渲染逻辑的正确性</li></ul></li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>微前端的架构模式并非无害</p><ul><li>导致依赖项冗余，增加用户的流量负担 没有非常理想的解决办法，一种简单的方案是将公共依赖从子应用的构建产物中剔除，但又会在引入构建时耦合</li><li>团队自治程度的增加，可能会破坏写作 在采用微前端之前，先要考虑几个问题 <ul><li>现有的前端开发、测试、发布流程如何扩展支持多个应用</li><li>分散的、控制弱化的工具体系及开发事件是否可靠</li><li>针对各式各样的前端代码库，如何建立质量标准</li></ul></li></ul><p>总之，微前端将产生一堆小的东西，因此需要考虑是否具备采用这种方法所需的技术和组织成熟度</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>类似于微服务之于后端，前端业务在发展到一定规模之后，也需要一种用来分解复杂度的架构模式，于是出现了微服务思想在前端领域的应用，即微前端。主要目的在于：</p><ul><li>技术架构上进一步的扩展性（模块边界清晰、依赖明确）</li><li>团队组织上的自治权</li><li>开发流程上能独立开发、独立交付</li><li>最大的意义在于解锁了多技术栈并存的能力，尤其适用于渐进式重构中架构升级过渡期</li><li>允许低成本尝试新技术栈，甚至允许选用最合适的技术栈做不同的事情</li></ul>',8);function s(_,E){const e=t("RouterLink");return r(),n("div",null,[c,o("p",null,[l("实现上，关键问题在于（具体查看"),d(e,{to:"/other/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF.html"},{default:h(()=>[l("解决思路")]),_:1}),l("）")]),p])}const m=a(u,[["render",s],["__file","micro-front-end-introduction.html.vue"]]);export{m as default};
