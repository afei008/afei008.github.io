import{_ as s,p as e,q as a,R as t,a1 as c}from"./framework-49860b1b.js";const o="/assets/14.1-116505ec.png",r="/assets/14.2-e59a206d.png",i="/assets/14.3-4aec1954.png",n="/assets/14.4-f8bfb851.png",d="/assets/14.5-518f681e.png",p="/assets/14.6-1cf26ca1.png",_="/assets/14.7-ac42fa57.png",m="/assets/14.8-13d9ee90.png",l={},h=c('<h1 id="第-14-章-使用-svg-dom" tabindex="-1"><a class="header-anchor" href="#第-14-章-使用-svg-dom" aria-hidden="true">#</a> 第 14 章 使用 SVG DOM</h1><h2 id="确定元素的属性值" tabindex="-1"><a class="header-anchor" href="#确定元素的属性值" aria-hidden="true">#</a> 确定元素的属性值</h2><p>大部分情况下，每个属性都含有两个子属性</p><ul><li><code>baseVal</code></li><li><code>animVal</code>：只读的，当对象产生动画后会更新，因此它始终代表属性值的当前显示状态</li></ul><p>它们两个包含自身数据的复杂对象，使得处理不同单位指定的属性值时更容易。以长度和角度为例，它们两个始终存储以用户单位保存的值（角度单位为度），不管在设定属性时使用的是什么单位</p><p>它们还包含了不同单位之间进行转换的方法</p><p><code>SVG</code> 定义了一些自定义对象来表示不同的几何数据，下表列出了一些最重要的对象以及可进行的操作</p><p><img src="'+o+'" alt=""><img src="'+r+'" alt=""><img src="'+i+'" alt=""></p><h2 id="svg-接口方法" tabindex="-1"><a class="header-anchor" href="#svg-接口方法" aria-hidden="true">#</a> SVG 接口方法</h2><p>使用脚本操作 <code>SVG</code> 是，有时候希望能计算一些未在属性中直接定义的几何属性，使用 <code>document.getElementById(id)</code> 会返回一个对象，这个对象有很多有用的属性和方法可以进行计算和维护，不同类型的对象的属性和方法也不相同</p><p>下表列出了一些元素对应的接口的部分特性</p><p><img src="'+n+'" alt=""><img src="'+d+'" alt=""><img src="'+p+'" alt=""><img src="'+_+'" alt=""><img src="'+m+'" alt=""></p>',12);function g(f,u){return e(),a("div",null,[t(" @format "),h])}const b=s(l,[["render",g],["__file","14.html.vue"]]);export{b as default};
