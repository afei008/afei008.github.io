import{_ as c,M as i,p as s,q as n,R as l,N as a,a1 as d,Q as e,t as o}from"./framework-49860b1b.js";const r={},p=d(`<h1 id="第-3-章-坐标系统" tabindex="-1"><a class="header-anchor" href="#第-3-章-坐标系统" aria-hidden="true">#</a> 第 3 章 坐标系统</h1><h2 id="视口" tabindex="-1"><a class="header-anchor" href="#视口" aria-hidden="true">#</a> 视口</h2><p>文档使用的画布区域称为视口，即 <code>&lt;svg&gt;</code> 元素。可通过 <code>width</code> 和 <code>height</code> 属性确定视口的大小。其取值如下</p><ul><li>纯数字：该数字会被当做用户坐标系的像素</li><li>百分比：当 <code>&lt;svg&gt;</code> 为根元素时，根据窗口计算，当嵌套时，根据父元素计算</li><li>带单位：与常规的 <code>CSS</code> 单位一致 <ul><li><code>em</code>：默认字体的大小，通常相当于文本行高</li><li><code>ex</code>：字母 <code>x</code> 的高度</li><li><code>px</code>：像素</li><li><code>pt</code>：点（1/72 英寸）</li><li><code>pc</code>：12 点（1/6 英寸）</li><li><code>cm</code>：厘米</li><li><code>mm</code>：毫米</li><li><code>in</code>：英寸</li></ul></li></ul><h2 id="使用默认用户坐标" tabindex="-1"><a class="header-anchor" href="#使用默认用户坐标" aria-hidden="true">#</a> 使用默认用户坐标</h2><p>坐标原点在左上角，向右及向下为正</p><ul><li>在 <code>&lt;svg&gt;</code> 元素中没有指定单位，也可以在某些形状元素中指定单位</li><li>在 <code>&lt;svg&gt;</code> 元素中指定单位，并不会影响其他元素中没有给定单位的坐标</li></ul><h2 id="为视口指定用户坐标" tabindex="-1"><a class="header-anchor" href="#为视口指定用户坐标" aria-hidden="true">#</a> 为视口指定用户坐标</h2><p>通过 <code>&lt;svg&gt;</code> 元素上的 <code>viewBox</code> 属性指定，其属性值由 4 个数值组成，分别代表想要叠加在视口上的用户坐标系统的：最小 <code>x</code> 坐标、最小 <code>y</code> 坐标、宽度、高度</p><p>因此要在 <code>4cm * 5cm</code> 的图纸上设置一个每厘米 16 个单位的坐标系统，要使用以下标记：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4cm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5cm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0 0 64 80<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码表示：要铺满 <code>4cm</code> 的宽度，形状元素的宽度需要指定为 64（不带单位，若带了单位则按照单位计算）</p><h2 id="保留宽高比" tabindex="-1"><a class="header-anchor" href="#保留宽高比" aria-hidden="true">#</a> 保留宽高比</h2><p>当视口的宽高比和 <code>viewBox</code> 不一样时，需要做相应处理</p><ul><li>按较小的尺寸等比例缩放图形，以使图形完全填充视口。此时需要指定图片的位置</li><li>按较大的尺寸等比例缩放图形，并裁剪掉超出视口的部分。此时需要指定图片的裁剪区域</li><li>拉伸和挤压绘图以使其恰好填充新的视口（即不保留宽高比）</li></ul><h3 id="为-preserveaspectratio-指定对齐方式" tabindex="-1"><a class="header-anchor" href="#为-preserveaspectratio-指定对齐方式" aria-hidden="true">#</a> 为 preserveAspectRatio 指定对齐方式</h3><p>用以指定被缩放的图像相对视口的对齐方式，以及是希望它适配边缘还是裁剪，语法如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>preserveAspectRatio=&quot;&lt;align&gt; &lt;meetOrSlice&gt;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;align&gt;</code> 取值如下</p><ul><li>none：不会进行强制统一缩放，如果需要，会缩放指定元素的图形内容，使元素的边界完全匹配视图矩形（注意：如果 <code>&lt;align&gt;</code> 的值是 <code>none</code>，则 <code>&lt;meetOrSlice&gt;</code> 属性的值将会被忽略。）</li><li>其他值：见下表</li></ul><table><thead><tr><th>y 对齐</th><th>x 对齐</th><th></th><th></th></tr></thead><tbody><tr><td>yMin<br>（按视口顶部边缘，<code>viewBox</code> 最小 <code>y</code> 值对齐）</td><td>xMin<br>（按视口左侧边缘，<code>viewBox</code> 最小 <code>x</code> 值对齐）</td><td>xMid<br>（按视口水平中心，<code>viewBox</code> 中点 <code>x</code> 值对齐）</td><td>xMax<br>（按视口右侧边缘，<code>viewBox</code> 最大 <code>x</code> 值对齐）</td></tr><tr><td>yMid<br>（按视口垂直中心，<code>viewBox</code> 中点 <code>y</code> 值对齐）</td><td>xMinYMid</td><td>xMidYMid（默认值）</td><td>xMaxYMid</td></tr><tr><td>yMax<br>（按视口底部边缘，<code>viewBox</code> 最大 <code>y</code> 值对齐）</td><td>xMinYMax</td><td>xMidYMax</td><td>xMaxYMax</td></tr></tbody></table><p><code>&lt;meetOrSlice&gt;</code> 取值如下</p><ul><li>meet：默认值 若宽高比不一致，此时 <code>viewBox</code> 比视口小。 图像将缩放到 <ul><li>保留宽高比</li><li>整个 <code>SVG</code> 的 <code>viewBox</code> 在试图范围内是可见的</li><li>尽可能的放大 <code>SVG</code> 的 <code>viewBox</code>，同时仍然满足其他的条件</li></ul></li><li>slice： 若宽高比不一致，此时 <code>viewBox</code> 比视口大。图像将缩放到 <ul><li>保留宽高比</li><li>整个视口将覆盖 <code>viewBox</code></li><li>尽可能的缩小 <code>SVG</code> 的 <code>viewBox</code>，同时仍然符合其他标准</li></ul></li></ul><h3 id="对齐方式与-meet-组合示例如下" tabindex="-1"><a class="header-anchor" href="#对齐方式与-meet-组合示例如下" aria-hidden="true">#</a> 对齐方式与 meet 组合示例如下</h3>`,24),h=e("h3",{id:"对齐方式与-slice-组合示例如下",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#对齐方式与-slice-组合示例如下","aria-hidden":"true"},"#"),o(" 对齐方式与 slice 组合示例如下")],-1),u=e("h3",{id:"使用-none-属性值-示例如下",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-none-属性值-示例如下","aria-hidden":"true"},"#"),o(" 使用 none 属性值 示例如下")],-1),x=d('<h2 id="嵌套坐标系统" tabindex="-1"><a class="header-anchor" href="#嵌套坐标系统" aria-hidden="true">#</a> 嵌套坐标系统</h2><p>可以在任何时候将另一个 <code>&lt;svg&gt;</code> 元素插入到文档中来建立新的视口和坐标系统。步骤如下</p><ul><li>绘制蓝色的矩形</li><li>为每个矩形定义一个带有对应 <code>preserveAspectRatio</code> 属性的新 <code>&lt;svg&gt;</code> 元素</li><li>使用 <code>&lt;use&gt;</code> 绘制，并让 <code>SVG</code> 做其他工作</li></ul>',3);function v(g,m){const t=i("iframe-load");return s(),n("div",null,[l(" @format "),p,a(t,{src:"/src/svg/3.4.2.html",height:"320px"}),h,a(t,{src:"/src/svg/3.4.3.html",height:"320px"}),u,a(t,{src:"/src/svg/3.4.4.html",height:"200px"}),x])}const k=c(r,[["render",v],["__file","3.html.vue"]]);export{k as default};
