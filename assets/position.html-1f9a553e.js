import{_ as t,p as i,q as o,a1 as e}from"./framework-49860b1b.js";const p={},a=e('<h1 id="position" tabindex="-1"><a class="header-anchor" href="#position" aria-hidden="true">#</a> position</h1><p>定义元素在文档流中的定位方式。top、bottom、right、left 属性决定了元素的最终位置</p><h2 id="取值" tabindex="-1"><a class="header-anchor" href="#取值" aria-hidden="true">#</a> 取值</h2><ul><li><p>static</p><p>元素在文档流中的默认定位方式，元素将占据所在位置的空间，此时 top、bottom、right、left、z-index 无效。</p></li><li><p>relative</p><p>元素在文档流中将以相对定位方式呈现，默认情况下，效果与 static 一致，当使用 top、bottom、right、left 进行定位时，元素的位置会调整，但不会影响页面的布局，并且在原来占位的地方留下空白</p></li><li><p>absolute</p><p>元素在文档流中以绝对定位方式呈现，元素不会占据文档流中的位置空间，以最近的非 static 定位的祖先元素进行定位，如果无符合条件的祖先元素，元素将以根元素，即 html 进行定位，若元素的宽高以相对方式计算（如百分比），也以祖先元素进行计算。绝对定位的元素的 margin 不会合并</p></li><li><p>fixed</p><p>效果与 absolute 类似，不同点为：默认情况下始终以屏幕窗口为定位元素，若有祖先元素的 transform 属性非 none 时，以该祖先为定位元素</p></li><li><p>sticky</p><p>许多时候我们都要实现根据页面位置，将某元素设置为绝对定位固定在某处的情况，之前一直是使用 js 来判断元素与滚动条的位置，然后改变元素的 position，现在使用这个 sticky，可以实现同样的效果</p><p>MDN 设置解析：假设样式为 <code>#one { position: sticky; top: 10px; }</code></p><p>在 viewport 视口滚动到元素 top 距离小于 10px 之前，元素为相对定位。之后，元素将固定在与顶部距离 10px 的位置，直到 viewport 视口回滚到阈值以下</p></li></ul>',4),s=[a];function n(r,l){return i(),o("div",null,s)}const d=t(p,[["render",n],["__file","position.html.vue"]]);export{d as default};
