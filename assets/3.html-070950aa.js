import{_ as e,M as t,p,q as o,Q as c,t as n,N as i,V as l,a1 as a}from"./framework-49860b1b.js";const r={},u=a(`<h1 id="跨组件通信" tabindex="-1"><a class="header-anchor" href="#跨组件通信" aria-hidden="true">#</a> 跨组件通信</h1><h2 id="props-和-emit" tabindex="-1"><a class="header-anchor" href="#props-和-emit" aria-hidden="true">#</a> props 和 <code>$emit</code></h2><p>父子组件通信用，props 传递数据给子组件，<code>$emit</code>触发父组件的事件，并且返回值</p><h2 id="attrs-和-listeners" tabindex="-1"><a class="header-anchor" href="#attrs-和-listeners" aria-hidden="true">#</a> <code>$attrs</code> 和 <code>$listeners</code></h2><p>跨级组件通信用</p><ul><li><code>$attrs</code>：包含父作用域中所有不在 props 里声明的属性，class 和 style 除外，可通过 v-bind=&quot;$attrs&quot; 传入组件内部</li><li><code>$listeners</code>：包含父作用域中所有 v-on 事件监听器，带 .native 修饰器的除外，可通过 v-on=&quot;$listeners&quot; 传入组件内部</li></ul><h2 id="中央事件总线-eventbus" tabindex="-1"><a class="header-anchor" href="#中央事件总线-eventbus" aria-hidden="true">#</a> 中央事件总线 EventBus</h2><p>非父子组件通信</p><ul><li><p>新建一个 Vue 实例，此处称为中央事件总线，然后将其赋值给<code>Vue.prototype.$EventBus</code>，使得所有组件都能访问到</p></li><li><p>组件 A 定义一个触发全局的事件 globalEvent，并传递一个参数</p><p><code>this.$EventBus.$emit(&#39;globalEvent&#39;, value)</code></p></li><li><p>组件 B 监听全局事件 globalEvent，并在回调函数里执行一些逻辑处理</p><p><code>this.$EventBus.$on(&#39;globalEvent&#39;,(value)=&gt;{ console.log(value); })</code></p></li></ul><h2 id="provide-和-inject" tabindex="-1"><a class="header-anchor" href="#provide-和-inject" aria-hidden="true">#</a> provide 和 inject</h2><p>主要用于开发高阶插件/组件库时使用，不推荐用于普通应用程序，用法与 react 的 context 类似</p><p>在父组件中通过 provide 提供属性，然后在子组件中通过 inject 来注入变量，不论子组件多深，只要调用了 inject 就可以注入在 provide 提供的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件</span>
<span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">provide</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token operator">:</span><span class="token string">&#39;text&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子组件</span>
<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>for
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">inject</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parent-和-children" tabindex="-1"><a class="header-anchor" href="#parent-和-children" aria-hidden="true">#</a> <code>$parent</code> 和 <code>$children</code></h2><p><code>$parent</code>就是父组件的实例对象，<code>$children</code>就是当前实例的直接子组件实例，该属性值是数组类型，且不保证顺序，也不是响应式</p><h2 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h2>`,16),d=a(`<h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> refs</h2><p>通过 this.$refs.xxx 拿到组件上面的所有方法和属性</p><h3 id="sync-修饰符" tabindex="-1"><a class="header-anchor" href="#sync-修饰符" aria-hidden="true">#</a> .sync 修饰符</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// 示例代码
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp</span> <span class="token attr-name">:foo.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp</span><span class="token punctuation">&gt;</span></span>
// 会被扩展为
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp</span> <span class="token attr-name">:foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>val =&gt; bar = val<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp</span><span class="token punctuation">&gt;</span></span>
// 子组件更新 foo 值 this.$emit(&#39;update:foo&#39;, newValue)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function v(k,h){const s=t("RouterLink");return p(),o("div",null,[u,c("p",null,[n("具体查看"),i(s,{to:"/framework/vue/%E8%A7%A3%E7%AD%94/vue/vuex.html"},{default:l(()=>[n("（解答）")]),_:1})]),d])}const b=e(r,[["render",v],["__file","3.html.vue"]]);export{b as default};
