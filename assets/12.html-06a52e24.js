import{_ as a,p as n,q as s,a1 as e}from"./framework-49860b1b.js";const t={},p=e(`<h1 id="垃圾回收机制与内存泄漏" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制与内存泄漏" aria-hidden="true">#</a> 垃圾回收机制与内存泄漏</h1><h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h2><p>js 在定义变量时就完成了内存分配</p><h2 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法" aria-hidden="true">#</a> 垃圾回收算法</h2><h3 id="引用计数垃圾收集" tabindex="-1"><a class="header-anchor" href="#引用计数垃圾收集" aria-hidden="true">#</a> 引用计数垃圾收集</h3><p>最初级的垃圾收集算法，此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”.如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收</p><p>限制：循环引用</p><p>该算法无法处理循环引用，示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span>
    o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;azerty&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法</h3><p>该算法把“对象是否不再需要”简化定义为“对象是否可以获得”</p><p>限制：那些无法从根对象查询到的对象都将被清除。该限制在实践中很少会碰到</p><h2 id="常见内存泄漏" tabindex="-1"><a class="header-anchor" href="#常见内存泄漏" aria-hidden="true">#</a> 常见内存泄漏</h2><h3 id="意外的全局变量" tabindex="-1"><a class="header-anchor" href="#意外的全局变量" aria-hidden="true">#</a> 意外的全局变量</h3><p>如果必须使用全局变量存储大量数据时，确保用完以后把它设置为 null 或者重新定义。</p><h3 id="被遗忘的计时器或回调函数" tabindex="-1"><a class="header-anchor" href="#被遗忘的计时器或回调函数" aria-hidden="true">#</a> 被遗忘的计时器或回调函数</h3><h3 id="脱离-dom-的引用" tabindex="-1"><a class="header-anchor" href="#脱离-dom-的引用" aria-hidden="true">#</a> 脱离 DOM 的引用</h3><p>例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在代码中保存了 span 的引用，在后面删除整个 div 的时候，此时 span 仍然在内存中保存，并未一起删除</p><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>闭包的特性使得它们很容易导致内存溢出，所以使用的时候要注意</p><h2 id="内存泄漏定位" tabindex="-1"><a class="header-anchor" href="#内存泄漏定位" aria-hidden="true">#</a> 内存泄漏定位</h2><p>chrome devtools：memory、performance</p>`,24),c=[p];function o(i,r){return n(),s("div",null,c)}const l=a(t,[["render",o],["__file","12.html.vue"]]);export{l as default};
