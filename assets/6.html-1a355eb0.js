import{_ as n,p as s,q as a,R as e,a1 as p}from"./framework-49860b1b.js";const t={},o=p(`<h1 id="第-6-章-typescript-类型进阶" tabindex="-1"><a class="header-anchor" href="#第-6-章-typescript-类型进阶" aria-hidden="true">#</a> 第 6 章 TypeScript 类型进阶</h1><h2 id="_6-1-泛型" tabindex="-1"><a class="header-anchor" href="#_6-1-泛型" aria-hidden="true">#</a> 6.1 泛型</h2><p>泛型是一种编程风格或编程范式，它允许在程序中定义形式类型参数，然后在泛型实例化时使用实际类型参数来替换形式类型参数</p><h3 id="泛型简介" tabindex="-1"><a class="header-anchor" href="#泛型简介" aria-hidden="true">#</a> 泛型简介</h3><p>简单泛型示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="形式类型参数" tabindex="-1"><a class="header-anchor" href="#形式类型参数" aria-hidden="true">#</a> 形式类型参数</h3><ul><li><p>形式类型参数声明</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>TypeParameter<span class="token punctuation">,</span> TypeParameter<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>形式类型参数名通常有两种风格</p><ul><li>以大写字母 <code>T</code> 开头，后接描述性名字，如 <code>TResponse</code></li><li>以单个大写字母命名，由 <code>T</code> 开始，参数少时建议采用这种风格</li></ul></li><li><p>类型参数默认类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> DefaultType<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>T</code>：形式类型参数</li><li><code>DefaultType</code>：默认类型</li></ul><p>默认类型也可以引用参数列表中排在前面的类型。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>可选的类型参数 可选类型参数须排在必须类型参数之后。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="实际类型参数" tabindex="-1"><a class="header-anchor" href="#实际类型参数" aria-hidden="true">#</a> 实际类型参数</h3><p>当显式地传入实际类型参数时，只有必选类型参数是一定要提供的</p><p>示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span>Date<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束" aria-hidden="true">#</a> 泛型约束</h3><h4 id="泛型约束声明" tabindex="-1"><a class="header-anchor" href="#泛型约束声明" aria-hidden="true">#</a> 泛型约束声明</h4><p>在泛型的形式类型参数上允许定义一个约束条件。语法示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>TypeParameter <span class="token keyword">extends</span> <span class="token class-name">ConstraintType</span> <span class="token operator">=</span> DefaultType<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>TypeParameter</code>：形式类型参数名</li><li><code>extends</code>：关键字</li><li><code>ConstraintType</code>：类型，用于约束 <code>TypeParameter</code> 的可选类型范围</li><li><code>DefaultType</code>：默认类型，必须满足泛型约束</li></ul><p>使用示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Point<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型约束引用类型参数" tabindex="-1"><a class="header-anchor" href="#泛型约束引用类型参数" aria-hidden="true">#</a> 泛型约束引用类型参数</h4><p>约束类型允许引用当前形式类型参数列表中的其他类型参数，但不允许直接或间接地引用自身。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 正确</span>
<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span>
<span class="token comment">// 错误</span>
<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基约束" tabindex="-1"><a class="header-anchor" href="#基约束" aria-hidden="true">#</a> 基约束</h4><p>本质上，每个类型参数都有一个基约束 <code>Base Constraint</code>，它与是否再形式类型参数上定义了泛型约束无关。类型参数的实际类型一定是其基约束的子类型。对于任意的类型参数 T，其基约束的计算规则有三个</p><ul><li>如果类型参数 <code>T</code> 声明了泛型约束，且泛型约束为另一个类型参数 <code>U</code>，<code>T</code> 的基约束为 <code>U</code></li><li>如果类型参数 <code>T</code> 声明了泛型约束，且泛型约束为某一具体类型 <code>Type</code>，则 <code>T</code> 的基约束为该 <code>Type</code></li><li>如果类型参数 <code>T</code> 没有声明泛型约束，则 <code>T</code> 的基约束为空对象类型字面量 <code>{}</code>，除了 <code>undefined</code> 类型和 <code>null</code> 类型外，都可以赋值给空对象类型字面量</li></ul><h4 id="常见错误" tabindex="-1"><a class="header-anchor" href="#常见错误" aria-hidden="true">#</a> 常见错误</h4><p>示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Point<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值类型须与参数 <code>arg</code> 的类型相同，而不能仅满足泛型约束，通过下一个的例子更容易理解。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 <code>obj</code> 的类型为 <code>false</code>，因此 <code>T</code> 的类型为 <code>false</code>，但函数内部返回了 <code>true</code></p><h3 id="泛型函数" tabindex="-1"><a class="header-anchor" href="#泛型函数" aria-hidden="true">#</a> 泛型函数</h3><p>若一个函数的函数签名中带有类型参数，那么它是一个泛型函数。泛型函数中的类型参数既可用于形式参数的类型，也可用于函数返回值类型</p><h4 id="泛型函数定义" tabindex="-1"><a class="header-anchor" href="#泛型函数定义" aria-hidden="true">#</a> 泛型函数定义</h4><ul><li>泛型调用签名语法如下<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>泛型构造签名语法如下<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="泛型函数类型推断" tabindex="-1"><a class="header-anchor" href="#泛型函数类型推断" aria-hidden="true">#</a> 泛型函数类型推断</h4><p>大部分情况下，编译器能够自动推断出泛型函数的实际类型参数，甚至比显式指定实际类型参数更加精确。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 推断出实际类型为 &#39;a&#39;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 推断出实际类型为 &#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型函数注意事项" tabindex="-1"><a class="header-anchor" href="#泛型函数注意事项" aria-hidden="true">#</a> 泛型函数注意事项</h4><p>如果一个函数既可以定义为非泛型函数，又可以定义为泛型函数，推荐使用非泛型函数</p><h3 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口" aria-hidden="true">#</a> 泛型接口</h3><p>若接口的定义中带有类型参数，则它是泛型接口。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">MyArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    first<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    last<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在引用泛型接口时，必须指定实际类型参数，除非类型参数定义了默认类型。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型类型别名" tabindex="-1"><a class="header-anchor" href="#泛型类型别名" aria-hidden="true">#</a> 泛型类型别名</h3><p>若类型别名的定义中带有类型参数，则它是泛型类型别名。语法示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Nullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用示例如下</p><ul><li><p>定义简单容器类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a<span class="token operator">:</span> Container<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b<span class="token operator">:</span> Container<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义树形结构</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
    left<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    right<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> tree<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    left<span class="token operator">:</span> <span class="token punctuation">{</span>
        value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        left<span class="token operator">:</span> <span class="token punctuation">{</span>
            value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
            left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    right<span class="token operator">:</span> <span class="token punctuation">{</span>
        vlaue<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类" aria-hidden="true">#</a> 泛型类</h3><p>若类的定义中带有类型参数，则它是泛型类。语法示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类声明</span>
<span class="token keyword">class</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 类表达式</span>
<span class="token keyword">const</span> Container <span class="token operator">=</span> <span class="token keyword">class</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型类中的类型参数允许在类的继承语句和接口实现语句中使用，即 <code>extends</code> 语句和 <code>implements</code> 语句。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Base<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    b<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Derived<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Base<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">readonly</span> a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个类声明都会创建两种类型：类的实例类型和类的构造函数类型。</p><p>泛型类描述的是类的实例类型。因为类的静态成员是类构造函数类型的一部分，所有泛型类型参数不能用于类的静态成员。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> version<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span> <span class="token comment">// 错误，静态成员不允许引用类型参数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-局部类型" tabindex="-1"><a class="header-anchor" href="#_6-2-局部类型" aria-hidden="true">#</a> 6.2 局部类型</h2><p>TypeScript 支持声明具有块级作用域的局部类型，主要包括</p><ul><li>局部枚举类型</li><li>局部类类型</li><li>局部接口类型</li><li>局部类型别名</li></ul><p>示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token constant">E</span> <span class="token punctuation">{</span>
        <span class="token constant">A</span><span class="token punctuation">,</span>
        <span class="token constant">B</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
        x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 可以带有泛型参数</span>
    <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">I</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
        x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 可以引用其他局部类型</span>
    <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">E</span><span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-3-联合类型" tabindex="-1"><a class="header-anchor" href="#_6-3-联合类型" aria-hidden="true">#</a> 6.3 联合类型</h2><p>联合类型由一组有序的成员类型构成，其表示一个值的类型可以为若干种类型之一，联合类型通过联合类型字面量来定义</p><h3 id="联合类型字面量" tabindex="-1"><a class="header-anchor" href="#联合类型字面量" aria-hidden="true">#</a> 联合类型字面量</h3><p>联合类型由两个或以上的成员类型构成，各成员类型之间使用 <code>|</code> 分隔，成员类型可以为任意类型。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NumericType</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>成员类型存在相同类型时，将被合并</li><li>绝大部分情况下，成员类型的顺序不影响联合类型的结果</li><li>对部分成员类型使用分组运算符 <code>()</code>，不影响联合类型的结果</li><li>如果某个成员类型 <code>A</code> 是其他成员类型 <code>B</code> 的子类型时，可以省略该成员类型 <code>A</code></li></ul><h3 id="联合类型的类型成员" tabindex="-1"><a class="header-anchor" href="#联合类型的类型成员" aria-hidden="true">#</a> 联合类型的类型成员</h3><p>与接口类型一样，联合类型作为一个整体也可以有类型成员，其类型成员由其成员类型决定</p><h4 id="属性签名" tabindex="-1"><a class="header-anchor" href="#属性签名" aria-hidden="true">#</a> 属性签名</h4><p>若联合类型 <code>U</code> 中的每个成员类型都包含一个同名的属性签名 <code>M</code></p><ul><li>则联合类型 <code>U</code> 也包含属性签名 <code>M</code></li><li><code>M</code> 类型为每个成员类型中 <code>M</code> 的类型组成的联合类型</li><li>若 <code>M</code> 在某个成员类型中为可选类型，则在 <code>U</code> 中也为可选，否则为必选</li></ul><p>示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    area<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    area<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    radius<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Circle <span class="token operator">|</span> Rectangle<span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> s<span class="token operator">:</span> Shape<span class="token punctuation">;</span>
s<span class="token punctuation">.</span>area<span class="token punctuation">;</span> <span class="token comment">// number</span>
s<span class="token punctuation">.</span>radius<span class="token punctuation">;</span> <span class="token comment">// number | string</span>
s<span class="token punctuation">.</span>width<span class="token punctuation">;</span> <span class="token comment">// 错误</span>
s<span class="token punctuation">.</span>height<span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引签名" tabindex="-1"><a class="header-anchor" href="#索引签名" aria-hidden="true">#</a> 索引签名</h4><p>此处的字符串索引签名和数值索引签名一致，统一用索引签名代替</p><p>如果联合类型中每个成员都包含索引签名，则该联合类型也拥有了索引签名，否则没有。索引签名中的索引值类型为每个成员类型中索引值类型的联合类型</p><p>示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// T 和 T0T1 相同</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">T0</span> <span class="token operator">|</span> <span class="token constant">T1</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T0T1</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> biging<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> biging<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调用签名与构造签名" tabindex="-1"><a class="header-anchor" href="#调用签名与构造签名" aria-hidden="true">#</a> 调用签名与构造签名</h4><p>与索引签名同理。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// T 和 T0T1 相同</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">T0</span> <span class="token operator">|</span> <span class="token constant">T1</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T0T1</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint<span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Date <span class="token operator">|</span> Error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-4-交叉类型" tabindex="-1"><a class="header-anchor" href="#_6-4-交叉类型" aria-hidden="true">#</a> 6.4 交叉类型</h2><p>交叉类型在逻辑上与联合类型是互补的，交叉类型表示一个值同时属于多种类型</p><p>交叉类型通过交叉类型字面量来定义</p><h3 id="交叉类型字面量" tabindex="-1"><a class="header-anchor" href="#交叉类型字面量" aria-hidden="true">#</a> 交叉类型字面量</h3><p>使用 <code>&amp;</code> 符号分隔各成员类型。示例如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Clickable</span> <span class="token punctuation">{</span>
    <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Focusable</span> <span class="token punctuation">{</span>
    <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> Clickable <span class="token operator">&amp;</span> Focusable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="成员类型的运算" tabindex="-1"><a class="header-anchor" href="#成员类型的运算" aria-hidden="true">#</a> 成员类型的运算</h4><ul><li>多个相同的成员类型会被合并</li><li>绝大部分情况下，成员类型的顺序不影响结果类型</li><li>当涉及到调用签名重载或构造签名重载时，则不能随便调用成员类型顺序，因为这会影响到重载签名的顺序</li><li>对部分类型成员使用分组运算符 <code>()</code> 不影响结果类型</li><li>交叉类型中使用原始类型成员时，结果类型将为 <code>never</code> 类型，虽然合法但不常见。示例如下<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">boolean</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="交叉类型的类型成员" tabindex="-1"><a class="header-anchor" href="#交叉类型的类型成员" aria-hidden="true">#</a> 交叉类型的类型成员</h3><h4 id="属性签名-1" tabindex="-1"><a class="header-anchor" href="#属性签名-1" aria-hidden="true">#</a> 属性签名</h4><ul><li>只要任何一个成员类型中包含了属性签名 <code>M</code>，则该交叉类型也包含 <code>M</code></li><li>交叉类型 <code>M</code> 的类型为各成员类型中 <code>M</code> 的交叉类型</li><li><code>M</code> 在所有成员类型中都为可选时，交叉类型中的 <code>M</code> 也为可选，否则为必选</li></ul><h4 id="索引签名-1" tabindex="-1"><a class="header-anchor" href="#索引签名-1" aria-hidden="true">#</a> 索引签名</h4><ul><li>只要任何一个成员类型包含了索引签名，则该交叉类型也拥有了索引签名，否则没有</li><li>交叉类型索引签名中的索引值类型为每个成员类型中索引值类型的交叉类型</li></ul><h4 id="调用签名与构造签名-1" tabindex="-1"><a class="header-anchor" href="#调用签名与构造签名-1" aria-hidden="true">#</a> 调用签名与构造签名</h4><p>若成员类型中含有调用签名或构造签名，则这些调用签名和构造签名将以成员类型的先后顺序合并到交叉类型中</p><p>因此当交叉类型中存在重载签名时，要留意顺序</p><h3 id="交叉类型与联合类型" tabindex="-1"><a class="header-anchor" href="#交叉类型与联合类型" aria-hidden="true">#</a> 交叉类型与联合类型</h3><ul><li><code>&amp;</code> 符号相当于数学中的 <code>×</code> 号</li><li><code>|</code> 符号相当于数学中的 <code>+</code> 号</li></ul><p>因此</p><ul><li>当两者同时使用时，交叉类型优先级更高</li><li>分配律性质，满足数学中的 <code>乘法分配律</code>。示例如下<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 没有交集的原始类型的交叉类型为 never</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">never</span> <span class="token operator">|</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// never 是所有类型的子类型</span>
<span class="token comment">// 若某成员类型是其他成员类型的子类型，则可删除该成员类型，因此删除 never</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_6-5-索引类型" tabindex="-1"><a class="header-anchor" href="#_6-5-索引类型" aria-hidden="true">#</a> 6.5 索引类型</h2>`,105);function c(l,i){return s(),a("div",null,[e(" @format "),o])}const u=n(t,[["render",c],["__file","6.html.vue"]]);export{u as default};
